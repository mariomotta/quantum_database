#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:02:50 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.700000000000 AA    0.000000000000   0.000000000000   1.322808287196 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -0.700000000000 AA    0.000000000000   0.000000000000  -1.322808287196 Bohr

nuclear repulsion = 6.42572327545714
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:         4.55

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpgbqwrzym
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpgbqwrzym
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -1.04037315571274  LUMO (E1y) = -0.612976046672663
Initial guess E= -14.9901539977451  |g|= 0.289921
macro= 0  E= -15.0164866086203  delta_E= -0.0263326  |g|= 0.289921  1 KF 4 JK
macro= 1  E= -15.0164889300848  delta_E= -2.32146e-06  |g|= 0.00217983  1 KF 4 JK
macro= 2  E= -15.0164889300848  delta_E= 7.10543e-15  |g|= 6.39731e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.0164889300848  |g|= 6.39731e-08  total 4 KF 14 JK
converged SCF energy = -15.0164889300848

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpgbqwrzym
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.0458527889374  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.0460680194773  dE = -0.00021523054  S^2 = 0.0000000
               |grad[o]|=0.00779  |grad[c]|= 0.0007604382435093142  |ddm|=0.000316
macro iter 2 (4 JK  2 micro), CASSCF E = -15.0461472814163  dE = -7.9261939e-05  S^2 = 0.0000000
               |grad[o]|=0.00405  |grad[c]|= 0.00046171407582675785  |ddm|=0.000386
macro iter 3 (3 JK  1 micro), CASSCF E = -15.0461478081679  dE = -5.2675167e-07  S^2 = 0.0000000
               |grad[o]|=0.000322  |grad[c]|= 8.680923185454057e-05  |ddm|=5.44e-05
macro iter 4 (1 JK  1 micro), CASSCF E = -15.0461478081743  dE = -6.3575811e-12  S^2 = 0.0000000
               |grad[o]|=5.15e-06  |grad[c]|= 3.677749485181391e-06  |ddm|=6.9e-07
1-step CASSCF converged in 4 macro (11 JK 5 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.98867462 1.96646421 0.00396484 0.01311279 0.01389177 0.01389177]
CASSCF energy = -15.0461478081743
CASCI E = -15.0461478081743  E(CI) = -4.86071224331651  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.045852788940184
Ground state energy (pad)  -15.045852788940184
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:03:44 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.900000000000 AA    0.000000000000   0.000000000000   1.700753512109 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -0.900000000000 AA    0.000000000000   0.000000000000  -1.700753512109 Bohr

nuclear repulsion = 4.9977847698
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:        58.02

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpxoj17vm4
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpxoj17vm4
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.962423132656619  LUMO (E1y) = -0.552165762814414
Initial guess E= -15.5016462028802  |g|= 0.156589
macro= 0  E= -15.5095565480939  delta_E= -0.00791035  |g|= 0.156589  1 KF 4 JK
macro= 1  E= -15.5095565761397  delta_E= -2.80458e-08  |g|= 0.000279075  1 KF 3 JK
macro= 2  E= -15.5095565761398  delta_E= -7.10543e-15  |g|= 4.22304e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.5095565761398  |g|= 4.22304e-06  total 4 KF 13 JK
converged SCF energy = -15.5095565761398

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpxoj17vm4
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.5347283777789  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.5348514247775  dE = -0.000123047  S^2 = 0.0000000
               |grad[o]|=0.00492  |grad[c]|= 0.0007293693283019543  |ddm|=0.0003
macro iter 2 (3 JK  1 micro), CASSCF E = -15.5348813408964  dE = -2.9916119e-05  S^2 = 0.0000000
               |grad[o]|=0.00217  |grad[c]|= 0.0005806751522652143  |ddm|=0.00011
macro iter 3 (1 JK  1 micro), CASSCF E = -15.5348813412848  dE = -3.8841819e-10  S^2 = 0.0000000
               |grad[o]|=1.48e-05  |grad[c]|= 2.5225569370384316e-05  |ddm|=1.67e-05
1-step CASSCF converged in 3 macro (7 JK 3 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.97604315 1.98920143 0.00428217 0.01287385 0.0087997  0.0087997 ]
CASSCF energy = -15.5348813412848
CASCI E = -15.5348813412848  E(CI) = -4.59311418846223  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.534728377783225
Ground state energy (pad)  -15.534728377783225
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/quantum_info/operators/symplectic/pauli.py:185: DeprecationWarning: Initializing Pauli from `Pauli(z=z, x=x)` kwargs is deprecated as of version 0.17.0 and will be removed no earlier than 3 months after the release date. Use tuple initialization `Pauli((z, x))` instead.
  base_z, base_x, base_phase = self._from_array_deprecated(z, x)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/primitive_ops/pauli_op.py:94: DeprecationWarning: `kron` is deprecated and will be removed no earlier than 3 months after the release date of Qiskit Terra 0.17.0. Use `expand` instead, but note this does not change the operator in-place.
  return PauliOp(op_copy.kron(self.primitive), coeff=self.coeff * other.coeff)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/primitive_ops/pauli_op.py:164: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  return self.primitive.to_spmatrix() * self.coeff  # type: ignore
gather_beh2_results_ry_linear.py:26: DeprecationWarning: Back-references to from Bit instances to their containing Registers have been deprecated. Instead, inspect Registers to find their contained Bits.
  qubits = [q.index for q in gate[1]]
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:04:34 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.100000000000 AA    0.000000000000   0.000000000000   2.078698737022 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.100000000000 AA    0.000000000000   0.000000000000  -2.078698737022 Bohr

nuclear repulsion = 4.08909662983636
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       108.38

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpekq4sm81
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpekq4sm81
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.867861147311336  LUMO (E1y) = -0.478632358287946
Initial guess E= -15.6868549990052  |g|= 0.0831913
macro= 0  E= -15.6892332215434  delta_E= -0.00237822  |g|= 0.0831913  1 KF 4 JK
macro= 1  E= -15.6892332216918  delta_E= -1.48457e-10  |g|= 1.70654e-05  1 KF 3 JK
Canonicalize SCF orbitals
macro X = 2  E=-15.6892332216918  |g|= 1.70654e-05  total 3 KF 10 JK
converged SCF energy = -15.6892332216918

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpekq4sm81
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.7165099100631  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (4 JK  2 micro), CASSCF E = -15.7165873884069  dE = -7.7478344e-05  S^2 = 0.0000000
               |grad[o]|=0.00369  |grad[c]|= 0.00042261943489629405  |ddm|=0.00036
macro iter 2 (3 JK  1 micro), CASSCF E = -15.7165924482166  dE = -5.0598098e-06  S^2 = 0.0000000
               |grad[o]|=0.000903  |grad[c]|= 0.0002408038830207811  |ddm|=6.78e-05
macro iter 3 (1 JK  1 micro), CASSCF E = -15.7165924482854  dE = -6.8807182e-11  S^2 = 0.0000000
               |grad[o]|=7.3e-06  |grad[c]|= 1.053376309169842e-05  |ddm|=4.89e-06
1-step CASSCF converged in 3 macro (8 JK 4 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.97609104 1.98556582 0.00703664 0.01692898 0.00718876 0.00718876]
CASSCF energy = -15.7165924482854
CASCI E = -15.7165924482854  E(CI) = -4.29117805776105  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.716509910085525
Ground state energy (pad)  -15.716509910085525
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:05:24 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.300000000000 AA    0.000000000000   0.000000000000   2.456643961935 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.300000000000 AA    0.000000000000   0.000000000000  -2.456643961935 Bohr

nuclear repulsion = 3.46000484063077
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       158.56

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpr5ijlypj
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpr5ijlypj
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.76438777253455  LUMO (E1y) = -0.401418183031037
Initial guess E= -15.7242818820011  |g|= 0.0604828
macro= 0  E= -15.7258077879644  delta_E= -0.00152591  |g|= 0.0604828  1 KF 4 JK
macro= 1  E= -15.7258077933436  delta_E= -5.37923e-09  |g|= 0.000117803  1 KF 3 JK
macro= 2  E= -15.7258077933436  delta_E= -3.55271e-15  |g|= 8.12394e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.7258077933436  |g|= 8.12394e-06  total 4 KF 13 JK
converged SCF energy = -15.7258077933436

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpr5ijlypj
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.7593587403141  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.7594079420923  dE = -4.9201778e-05  S^2 = 0.0000000
               |grad[o]|=0.00317  |grad[c]|= 0.0007180585759569547  |ddm|=0.000368
macro iter 2 (1 JK  1 micro), CASSCF E = -15.7594079428875  dE = -7.9524654e-10  S^2 = 0.0000000
               |grad[o]|=2.63e-05  |grad[c]|= 3.248968171278245e-05  |ddm|=1.14e-05
1-step CASSCF converged in 2 macro (4 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.97069143 1.97664118 0.01271962 0.02657319 0.00668729 0.00668729]
CASSCF energy = -15.7594079428875
CASCI E = -15.7594079428875  E(CI) = -3.99899521493629  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.759358740522778
Ground state energy (pad)  -15.759358740522778
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:06:12 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.500000000000 AA    0.000000000000   0.000000000000   2.834589186848 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.500000000000 AA    0.000000000000   0.000000000000  -2.834589186848 Bohr

nuclear repulsion = 2.99867086188
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       206.88

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpsk7nacep
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpsk7nacep
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.659377120008162  LUMO (E1y) = -0.323704247937121
Initial guess E= -15.6926711424918  |g|= 0.0658654
macro= 0  E= -15.6951396752461  delta_E= -0.00246853  |g|= 0.0658654  1 KF 4 JK
macro= 1  E= -15.6951397274123  delta_E= -5.21661e-08  |g|= 0.00032029  1 KF 4 JK
macro= 2  E= -15.6951397274123  delta_E= 7.10543e-15  |g|= 3.54503e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.6951397274123  |g|= 3.54503e-09  total 4 KF 14 JK
converged SCF energy = -15.6951397274123

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpsk7nacep
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.7388893806085  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.7389228901295  dE = -3.3509521e-05  S^2 = 0.0000000
               |grad[o]|=0.00303  |grad[c]|= 0.0005043273260108029  |ddm|=0.000328
macro iter 2 (1 JK  1 micro), CASSCF E = -15.7389228903922  dE = -2.6266811e-10  S^2 = 0.0000000
               |grad[o]|=2.38e-05  |grad[c]|= 1.875856148639547e-05  |ddm|=7.95e-06
1-step CASSCF converged in 2 macro (4 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.95930112 1.95938937 0.02256882 0.04487287 0.00693391 0.00693391]
CASSCF energy = -15.7389228903922
CASCI E = -15.7389228903922  E(CI) = -3.73337306362397  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.738889380648272
Ground state energy (pad)  -15.73888938064827
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:07:05 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.700000000000 AA    0.000000000000   0.000000000000   3.212534411761 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.700000000000 AA    0.000000000000   0.000000000000  -3.212534411761 Bohr

nuclear repulsion = 2.6458860546
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       259.14

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjg_59fd6
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjg_59fd6
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.558155882300186  LUMO (E1y) = -0.248159027530499
Initial guess E= -15.627964778305  |g|= 0.082458
macro= 0  E= -15.632792741742  delta_E= -0.00482796  |g|= 0.082458  1 KF 4 JK
macro= 1  E= -15.632793320802  delta_E= -5.7906e-07  |g|= 0.000965357  1 KF 4 JK
macro= 2  E= -15.632793320802  delta_E= 0  |g|= 5.95868e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.632793320802  |g|= 5.95868e-08  total 4 KF 14 JK
converged SCF energy = -15.632793320802

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjg_59fd6
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.6912995455991  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.6913270657499  dE = -2.7520151e-05  S^2 = 0.0000000
               |grad[o]|=0.0032  |grad[c]|= 0.0003808191775753635  |ddm|=0.000327
macro iter 2 (1 JK  1 micro), CASSCF E = -15.6913270659126  dE = -1.6268586e-10  S^2 = 0.0000000
               |grad[o]|=2.22e-05  |grad[c]|= 1.4443997517454036e-05  |ddm|=1.29e-05
1-step CASSCF converged in 2 macro (4 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.93991027 1.92784051 0.03841455 0.0776214  0.00810664 0.00810664]
CASSCF energy = -15.6913270659126
CASCI E = -15.6913270659126  E(CI) = -3.49866861949243  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.691299545621822
Ground state energy (pad)  -15.691299545621822
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:07:59 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.900000000000 AA    0.000000000000   0.000000000000   3.590479636674 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.900000000000 AA    0.000000000000   0.000000000000  -3.590479636674 Bohr

nuclear repulsion = 2.36737173306316
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       313.56

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpigu68vqy
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpigu68vqy
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.464243752047602  LUMO (E1y) = -0.176432769613011
Initial guess E= -15.5471504570026  |g|= 0.106882
macro= 0  E= -15.5566705993414  delta_E= -0.00952014  |g|= 0.106882  1 KF 4 JK
macro= 1  E= -15.5566781105713  delta_E= -7.51123e-06  |g|= 0.00324787  1 KF 4 JK
macro= 2  E= -15.5566781105713  delta_E= -3.55271e-15  |g|= 1.21522e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.5566781105713  |g|= 1.21522e-06  total 4 KF 14 JK
converged SCF energy = -15.5566781105713

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpigu68vqy
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.6355607706627  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.6355892061788  dE = -2.8435516e-05  S^2 = 0.0000000
               |grad[o]|=0.00372  |grad[c]|= 0.00031894961359914026  |ddm|=0.000404
macro iter 2 (1 JK  1 micro), CASSCF E = -15.6355892064365  dE = -2.5768365e-10  S^2 = 0.0000000
               |grad[o]|=2.31e-05  |grad[c]|= 1.5934128973095967e-05  |ddm|=2.52e-05
1-step CASSCF converged in 2 macro (4 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.91018162 1.87100048 0.06218613 0.13490023 0.01086577 0.01086577]
CASSCF energy = -15.6355892064365
CASCI E = -15.6355892064365  E(CI) = -3.2953825173078  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.635560770672962
Ground state energy (pad)  -15.635560770672964
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:08:54 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.100000000000 AA    0.000000000000   0.000000000000   3.968424861587 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -2.100000000000 AA    0.000000000000   0.000000000000  -3.968424861587 Bohr

nuclear repulsion = 2.14190775848571
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       368.42

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp0c9terx4
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp0c9terx4
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.380371007267217  LUMO (A1) = -0.15786755131346
Initial guess E= -15.4580838391602  |g|= 0.138981
macro= 0  E= -15.4754429279898  delta_E= -0.0173591  |g|= 0.138981  2 KF 5 JK
macro= 1  E= -15.4766029763846  delta_E= -0.00116005  |g|= 0.0332798  1 KF 4 JK
macro= 2  E= -15.4766030445328  delta_E= -6.81481e-08  |g|= 0.000289843  1 KF 4 JK
macro= 3  E= -15.4766030445328  delta_E= -3.55271e-15  |g|= 1.65693e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.4766030445328  |g|= 1.65693e-08  total 6 KF 20 JK
converged SCF energy = -15.4766030445328

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp0c9terx4
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.5827941566852  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.5828323471189  dE = -3.8190434e-05  S^2 = 0.0000000
               |grad[o]|=0.00486  |grad[c]|= 0.0003086590660116572  |ddm|=0.000649
macro iter 2 (3 JK  1 micro), CASSCF E = -15.5828323491789  dE = -2.0600197e-09  S^2 = 0.0000000
               |grad[o]|=3e-05  |grad[c]|= 2.3448935473391868e-05  |ddm|=5.66e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.86882962 1.76882888 0.23449595 0.09427271 0.01678642 0.01678642]
CASSCF energy = -15.5828323491789
CASCI E = -15.5828323491789  E(CI) = -3.1232759942695  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.582794157048156
Ground state energy (pad)  -15.582794157048156
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:09:52 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.300000000000 AA    0.000000000000   0.000000000000   4.346370086500 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -2.300000000000 AA    0.000000000000   0.000000000000  -4.346370086500 Bohr

nuclear repulsion = 1.95565490992174
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       426.41

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpo5l_4wq9
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpo5l_4wq9
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.308886709380645  LUMO (A1) = -0.137799359104182
Initial guess E= -15.3648694916786  |g|= 0.173002
macro= 0  E= -15.3983844823934  delta_E= -0.033515  |g|= 0.011368  2 KF 6 JK
macro= 1  E= -15.3984702623871  delta_E= -8.578e-05  |g|= 0.011368  1 KF 4 JK
macro= 2  E= -15.398470262861  delta_E= -4.73978e-10  |g|= 1.86637e-05  1 KF 3 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.398470262861  |g|= 1.86637e-05  total 5 KF 17 JK
converged SCF energy = -15.398470262861

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpo5l_4wq9
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.540439803505  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.5405074230689  dE = -6.7619564e-05  S^2 = 0.0000000
               |grad[o]|=0.00731  |grad[c]|= 0.00033759501534515244  |ddm|=0.00158
macro iter 2 (3 JK  1 micro), CASSCF E = -15.5405074259242  dE = -2.8553124e-09  S^2 = 0.0000000
               |grad[o]|=5.83e-05  |grad[c]|= 8.872957560089297e-06  |ddm|=5.78e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.8163423  1.58878205 0.40720073 0.1299597  0.02885761 0.02885761]
CASSCF energy = -15.5405074259242
CASCI E = -15.5405074259242  E(CI) = -2.98246676240698  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.540439803580043
Ground state energy (pad)  -15.540439803580043
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:10:47 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.500000000000 AA    0.000000000000   0.000000000000   4.724315311413 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -2.500000000000 AA    0.000000000000   0.000000000000  -4.724315311413 Bohr

nuclear repulsion = 1.799202517128
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       481.41

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpg_faszdd
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpg_faszdd
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.251416414918695  LUMO (A1) = -0.117194808455083
Initial guess E= -15.2742179409377  |g|= 0.193594
macro= 0  E= -15.3227550205085  delta_E= -0.0485371  |g|= 0.193594  1 KF 5 JK
macro= 1  E= -15.3261394527397  delta_E= -0.00338443  |g|= 0.0501781  1 KF 4 JK
macro= 2  E= -15.3261443640345  delta_E= -4.91129e-06  |g|= 0.00230286  1 KF 4 JK
macro= 3  E= -15.3261443640352  delta_E= -7.74492e-13  |g|= 2.63748e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.3261443640352  |g|= 2.63748e-06  total 5 KF 20 JK
converged SCF energy = -15.3261443640352

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpg_faszdd
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.5135145017485  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.5136523097756  dE = -0.00013780803  S^2 = 0.0000000
               |grad[o]|=0.0115  |grad[c]|= 0.0004192565972056063  |ddm|=0.00342
macro iter 2 (3 JK  1 micro), CASSCF E = -15.5136523181586  dE = -8.3830098e-09  S^2 = 0.0000000
               |grad[o]|=0.000128  |grad[c]|= 1.908536942368955e-05  |ddm|=2.96e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.75395821 1.32327203 0.66881617 0.1581158  0.04791889 0.04791889]
CASSCF energy = -15.5136523181586
CASCI E = -15.5136523181586  E(CI) = -2.87312580763294  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.513514501909526
Ground state energy (pad)  -15.513514501909528
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:11:37 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.700000000000 AA    0.000000000000   0.000000000000   5.102260536326 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -2.700000000000 AA    0.000000000000   0.000000000000  -5.102260536326 Bohr

nuclear repulsion = 1.6659282566
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       531.03

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp7h15_b1h
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp7h15_b1h
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.207907359650373  LUMO (A1) = -0.0978093465028038
Initial guess E= -15.1995633598786  |g|= 0.187235
macro= 0  E= -15.2525175525924  delta_E= -0.0529542  |g|= 0.187235  1 KF 5 JK
macro= 1  E= -15.2618212595257  delta_E= -0.00930371  |g|= 0.0795055  2 KF 5 JK
macro= 2  E= -15.262306331721  delta_E= -0.000485072  |g|= 0.0158694  1 KF 4 JK
macro= 3  E= -15.2623063981066  delta_E= -6.63857e-08  |g|= 0.000254726  1 KF 4 JK
macro= 4  E= -15.2623063981066  delta_E= 3.55271e-15  |g|= 5.1624e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 5  E=-15.2623063981066  |g|= 5.1624e-08  total 7 KF 26 JK
converged SCF energy = -15.2623063981066

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp7h15_b1h
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.5016164744416  S^2 = 0.0000005
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.5018466221103  dE = -0.00023014767  S^2 = 0.0000000
               |grad[o]|=0.0152  |grad[c]|= 0.0005551784262089994  |ddm|=0.0036
macro iter 2 (3 JK  1 micro), CASSCF E = -15.5018466374956  dE = -1.5385311e-08  S^2 = 0.0000000
               |grad[o]|=0.000165  |grad[c]|= 2.2780781113567316e-05  |ddm|=0.000116
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.69844922 1.09197072 0.91090484 0.17131079 0.06368222 0.06368222]
CASSCF energy = -15.5018466374956
CASCI E = -15.5018466374956  E(CI) = -2.79132318834697  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.501616492771776
Ground state energy (pad)  -15.501616492771776
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:12:33 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.900000000000 AA    0.000000000000   0.000000000000   5.480205761239 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -2.900000000000 AA    0.000000000000   0.000000000000  -5.480205761239 Bohr

nuclear repulsion = 1.55103665269655
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       587.30

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp84mlmo_r
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp84mlmo_r
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.176242924927914  LUMO (A1) = -0.0806216641757186
Initial guess E= -15.1512207512846  |g|= 0.158906
macro= 0  E= -15.198014595925  delta_E= -0.0467938  |g|= 0.158906  1 KF 5 JK
macro= 1  E= -15.2088551960898  delta_E= -0.0108406  |g|= 0.00871576  2 KF 6 JK
macro= 2  E= -15.2088586024338  delta_E= -3.40634e-06  |g|= 0.00167971  1 KF 4 JK
macro= 3  E= -15.2088586024339  delta_E= -8.52651e-14  |g|= 3.76033e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.2088586024339  |g|= 3.76033e-06  total 6 KF 22 JK
converged SCF energy = -15.2088586024339

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp84mlmo_r
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4980546798713  S^2 = 0.0000001
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4983398886052  dE = -0.00028520873  S^2 = 0.0000000
               |grad[o]|=0.0167  |grad[c]|= 0.0006639343141253524  |ddm|=0.00251
macro iter 2 (3 JK  1 micro), CASSCF E = -15.4983399023318  dE = -1.3726622e-08  S^2 = 0.0000000
               |grad[o]|=0.000138  |grad[c]|= 2.3941422637019684e-05  |ddm|=3.21e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.67702077 0.98585818 1.0299658  0.16707394 0.07004065 0.07004065]
CASSCF energy = -15.4983399023318
CASCI E = -15.4983399023318  E(CI) = -2.72742611326176  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.498054681627915
Ground state energy (pad)  -15.498054681627913
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:13:21 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.100000000000 AA    0.000000000000   0.000000000000   5.858150986152 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -3.100000000000 AA    0.000000000000   0.000000000000  -5.858150986152 Bohr

nuclear repulsion = 1.45096977187742
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       635.05

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp87o2hl9d
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp87o2hl9d
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.153514473760504  LUMO (A1) = -0.0662687798241129
Initial guess E= -15.1258645289656  |g|= 0.123322
macro= 0  E= -15.1609412255474  delta_E= -0.0350767  |g|= 0.123322  1 KF 5 JK
macro= 1  E= -15.1666879009191  delta_E= -0.00574668  |g|= 0.0489865  2 KF 5 JK
macro= 2  E= -15.1670167034756  delta_E= -0.000328803  |g|= 0.0089159  1 KF 4 JK
macro= 3  E= -15.1670167625562  delta_E= -5.90807e-08  |g|= 0.000211372  1 KF 4 JK
macro= 4  E= -15.1670167625563  delta_E= -7.10543e-15  |g|= 8.21062e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 5  E=-15.1670167625563  |g|= 8.21062e-08  total 7 KF 26 JK
converged SCF energy = -15.1670167625563

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp87o2hl9d
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4973538258551  S^2 = 0.0000001
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4976565224434  dE = -0.00030269659  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007122439418499407  |ddm|=0.00174
macro iter 2 (3 JK  1 micro), CASSCF E = -15.4976565328722  dE = -1.0428817e-08  S^2 = 0.0000000
               |grad[o]|=0.000107  |grad[c]|= 1.3411663881679244e-05  |ddm|=2.33e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.68737887 0.96105328 1.0612153  0.14689037 0.07173109 0.07173109]
CASSCF energy = -15.4976565328722
CASCI E = -15.4976565328722  E(CI) = -2.67395369870377  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.49735382874505
Ground state energy (pad)  -15.497353828745052
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:14:08 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.300000000000 AA    0.000000000000   0.000000000000   6.236096211065 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -3.300000000000 AA    0.000000000000   0.000000000000  -6.236096211065 Bohr

nuclear repulsion = 1.36303220994545
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       682.07

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp4izjri48
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp4izjri48
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.137625111424889  LUMO (A1) = -0.0556901883933211
Initial guess E= -15.1131501597907  |g|= 0.0903873
macro= 0  E= -15.135503680363  delta_E= -0.0223535  |g|= 0.0903873  1 KF 5 JK
macro= 1  E= -15.1369610464653  delta_E= -0.00145737  |g|= 0.0190089  1 KF 4 JK
macro= 2  E= -15.1369610514212  delta_E= -4.95592e-09  |g|= 0.00012696  1 KF 4 JK
macro= 3  E= -15.1369610514212  delta_E= 0  |g|= 2.21724e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.1369610514212  |g|= 2.21724e-09  total 5 KF 20 JK
converged SCF energy = -15.1369610514212

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp4izjri48
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.497386669842  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4976915264393  dE = -0.0003048566  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007185180765835858  |ddm|=0.00153
macro iter 2 (3 JK  1 micro), CASSCF E = -15.4976915357636  dE = -9.3242942e-09  S^2 = 0.0000000
               |grad[o]|=9.48e-05  |grad[c]|= 1.8621623629379647e-05  |ddm|=2.11e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.71323071 0.96903279 1.0536767  0.11997316 0.07204332 0.07204332]
CASSCF energy = -15.4976915357636
CASCI E = -15.4976915357636  E(CI) = -2.62749550613226  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.497386670249604
Ground state energy (pad)  -15.497386670249604
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:14:54 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.500000000000 AA    0.000000000000   0.000000000000   6.614041435978 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -3.500000000000 AA    0.000000000000   0.000000000000  -6.614041435978 Bohr

nuclear repulsion = 1.28514465509143
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       728.72

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpqiazxw5q
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpqiazxw5q
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.127413262463824  LUMO (A1) = -0.0498665499732821
Initial guess E= -15.1053728998706  |g|= 0.0638798
macro= 0  E= -15.11669004727  delta_E= -0.0113171  |g|= 0.0638798  2 KF 6 JK
macro= 1  E= -15.1172479969046  delta_E= -0.00055795  |g|= 0.0111286  1 KF 4 JK
macro= 2  E= -15.1172481596837  delta_E= -1.62779e-07  |g|= 0.000312962  1 KF 3 JK
macro= 3  E= -15.1172481596837  delta_E= -7.10543e-15  |g|= 4.62782e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.1172481596837  |g|= 4.62782e-06  total 6 KF 20 JK
converged SCF energy = -15.1172481596837

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpqiazxw5q
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4975373825317  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4978411303296  dE = -0.0003037478  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007336918691651365  |ddm|=0.00154
macro iter 2 (3 JK  1 micro), CASSCF E = -15.4978411397429  dE = -9.4133412e-09  S^2 = 0.0000000
               |grad[o]|=9.46e-05  |grad[c]|= 1.4115137570516335e-05  |ddm|=2.8e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.73942905 0.98273017 1.03613393 0.09765448 0.07202619 0.07202619]
CASSCF energy = -15.4978411397429
CASCI E = -15.4978411397429  E(CI) = -2.58642855248588  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.49753738520455
Ground state energy (pad)  -15.497537385204552
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:15:41 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.700000000000 AA    0.000000000000   0.000000000000   6.991986660891 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -3.700000000000 AA    0.000000000000   0.000000000000  -6.991986660891 Bohr

nuclear repulsion = 1.21567737643784
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       775.57

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpo1xpi3th
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpo1xpi3th
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.121533314404122  LUMO (A1) = -0.0483171155944131
Initial guess E= -15.099636068089  |g|= 0.044208
macro= 0  E= -15.105025581721  delta_E= -0.00538951  |g|= 0.044208  1 KF 4 JK
macro= 1  E= -15.1051138391309  delta_E= -8.82574e-05  |g|= 0.0062329  1 KF 4 JK
macro= 2  E= -15.1051139570103  delta_E= -1.17879e-07  |g|= 0.000154535  1 KF 4 JK
macro= 3  E= -15.1051139570104  delta_E= -1.77636e-14  |g|= 9.3111e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.1051139570104  |g|= 9.3111e-06  total 5 KF 19 JK
converged SCF energy = -15.1051139570104

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpo1xpi3th
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4976607526072  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4979638957241  dE = -0.00030314312  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007298655929099138  |ddm|=0.00152
macro iter 2 (3 JK  1 micro), CASSCF E = -15.4979639047505  dE = -9.0264027e-09  S^2 = 0.0000000
               |grad[o]|=9.28e-05  |grad[c]|= 9.190307696617638e-06  |ddm|=2.39e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.75866325 0.99192056 1.02120942 0.08428699 0.0719599  0.0719599 ]
CASSCF energy = -15.4979639047505
CASCI E = -15.4979639047505  E(CI) = -2.54977912579247  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.497660753513562
Ground state energy (pad)  -15.497660753513554
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:16:29 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.900000000000 AA    0.000000000000   0.000000000000   7.369931885804 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -3.900000000000 AA    0.000000000000   0.000000000000  -7.369931885804 Bohr

nuclear repulsion = 1.15333494687692
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       823.88

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp2356sv4m
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp2356sv4m
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.118241083867891  LUMO (A1) = -0.0492086674038972
Initial guess E= -15.0953106247439  |g|= 0.0303116
macro= 0  E= -15.0977620269827  delta_E= -0.0024514  |g|= 0.0303116  1 KF 4 JK
macro= 1  E= -15.0977720117831  delta_E= -9.9848e-06  |g|= 0.0018227  1 KF 4 JK
macro= 2  E= -15.0977720137561  delta_E= -1.97305e-09  |g|= 1.93793e-05  1 KF 3 JK
macro= 3  E= -15.0977720137561  delta_E= 1.06581e-14  |g|= 6.24108e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.0977720137561  |g|= 6.24108e-07  total 5 KF 18 JK
converged SCF energy = -15.0977720137561

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp2356sv4m
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4977399412681  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4980431604307  dE = -0.00030321916  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007277048545761374  |ddm|=0.00151
macro iter 2 (3 JK  1 micro), CASSCF E = -15.49804316938  dE = -8.9493319e-09  S^2 = 0.0000000
               |grad[o]|=9.21e-05  |grad[c]|= 9.483077208195116e-06  |ddm|=2.54e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.77076311 0.99648856 1.01132911 0.07760899 0.07190512 0.07190512]
CASSCF energy = -15.49804316938
CASCI E = -15.49804316938  E(CI) = -2.51685442292749  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.49773994240878
Ground state energy (pad)  -15.49773994240878
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:17:15 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   4.100000000000 AA    0.000000000000   0.000000000000   7.747877110717 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -4.100000000000 AA    0.000000000000   0.000000000000  -7.747877110717 Bohr

nuclear repulsion = 1.09707470556585
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       869.88

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp_mu8y_4i
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp_mu8y_4i
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.116141255019476  LUMO (A1) = -0.0508995014495959
Initial guess E= -15.0921110178012  |g|= 0.0207402
macro= 0  E= -15.0932165566963  delta_E= -0.00110554  |g|= 0.0207402  1 KF 4 JK
macro= 1  E= -15.0932176590761  delta_E= -1.10238e-06  |g|= 0.000550572  1 KF 4 JK
macro= 2  E= -15.0932176590798  delta_E= -3.71259e-12  |g|= 8.05741e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.0932176590798  |g|= 8.05741e-06  total 4 KF 14 JK
converged SCF energy = -15.0932176590798

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp_mu8y_4i
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4977860044439  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4980894926928  dE = -0.00030348825  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007265803261898315  |ddm|=0.0015
macro iter 2 (2 JK  1 micro), CASSCF E = -15.4980895015185  dE = -8.825765e-09  S^2 = 0.0000000
               |grad[o]|=9.18e-05  |grad[c]|= 7.691728394209087e-06  |ddm|=2.23e-05
1-step CASSCF converged in 2 macro (5 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.77765805 0.99849932 1.00559096 0.07450912 0.07187128 0.07187128]
CASSCF energy = -15.4980895015185
CASCI E = -15.4980895015185  E(CI) = -2.48711587384078  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.497786005146803
Ground state energy (pad)  -15.497786005146803
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:18:02 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   4.300000000000 AA    0.000000000000   0.000000000000   8.125822335630 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -4.300000000000 AA    0.000000000000   0.000000000000  -8.125822335630 Bohr

nuclear repulsion = 1.04604797507442
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       917.04

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp_kb20zpf
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp_kb20zpf
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.114504783151589  LUMO (A1) = -0.0525896639722248
Initial guess E= -15.0897224919258  |g|= 0.0142091
macro= 0  E= -15.0902249664485  delta_E= -0.000502475  |g|= 0.0142091  1 KF 4 JK
macro= 1  E= -15.0902250844524  delta_E= -1.18004e-07  |g|= 0.000172165  1 KF 3 JK
macro= 2  E= -15.0902250844525  delta_E= -4.26326e-14  |g|= 9.08862e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.0902250844525  |g|= 9.08862e-06  total 4 KF 13 JK
converged SCF energy = -15.0902250844525

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp_kb20zpf
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4978113893001  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4981150901167  dE = -0.00030370082  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007277238195830752  |ddm|=0.0015
macro iter 2 (2 JK  1 micro), CASSCF E = -15.4981150990099  dE = -8.8931706e-09  S^2 = 0.0000000
               |grad[o]|=9.2e-05  |grad[c]|= 1.0185459247406818e-05  |ddm|=2.06e-05
1-step CASSCF converged in 2 macro (5 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.78126219 0.99935314 1.00259411 0.07308806 0.07185125 0.07185125]
CASSCF energy = -15.4981150990099
CASCI E = -15.4981150990099  E(CI) = -2.46012713969964  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.497811389613107
Ground state energy (pad)  -15.497811389613107
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [3] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Mon May  9 13:18:49 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   4.500000000000 AA    0.000000000000   0.000000000000   8.503767560543 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -4.500000000000 AA    0.000000000000   0.000000000000  -8.503767560543 Bohr

nuclear repulsion = 0.99955695396
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       964.00

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmphiogphtj
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmphiogphtj
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.113071589447658  LUMO (A1) = -0.0540771762830671
Initial guess E= -15.0878699626904  |g|= 0.00975348
macro= 0  E= -15.0881005254448  delta_E= -0.000230563  |g|= 0.00975348  1 KF 4 JK
macro= 1  E= -15.088100537858  delta_E= -1.24132e-08  |g|= 5.5312e-05  1 KF 3 JK
macro= 2  E= -15.088100537858  delta_E= -7.10543e-15  |g|= 3.09129e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.088100537858  |g|= 3.09129e-06  total 4 KF 13 JK
converged SCF energy = -15.088100537858

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmphiogphtj
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4978248709341  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4981286848667  dE = -0.00030381393  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007314723031579374  |ddm|=0.00152
macro iter 2 (2 JK  1 micro), CASSCF E = -15.4981286938704  dE = -9.0036831e-09  S^2 = 0.0000000
               |grad[o]|=9.27e-05  |grad[c]|= 7.4805312851764205e-06  |ddm|=2.23e-05
1-step CASSCF converged in 2 macro (5 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.78301713 0.99971651 1.00115908 0.07242747 0.07183991 0.07183991]
CASSCF energy = -15.4981286938704
CASCI E = -15.4981286938704  E(CI) = -2.43552767318847  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.497824872034117
Ground state energy (pad)  -15.497824872034117
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
