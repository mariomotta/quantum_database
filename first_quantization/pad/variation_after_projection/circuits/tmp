#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:28:43 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.700000000000 AA    0.000000000000   0.000000000000   1.322808287196 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -0.700000000000 AA    0.000000000000   0.000000000000  -1.322808287196 Bohr

nuclear repulsion = 6.42572327545714
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:         3.84

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpm5pz1kmw
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpm5pz1kmw
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -1.04037315571274  LUMO (E1y) = -0.612976046672663
Initial guess E= -14.9901539977451  |g|= 0.289921
macro= 0  E= -15.0164866086203  delta_E= -0.0263326  |g|= 0.289921  1 KF 4 JK
macro= 1  E= -15.0164889300848  delta_E= -2.32146e-06  |g|= 0.00217983  1 KF 4 JK
macro= 2  E= -15.0164889300848  delta_E= 7.10543e-15  |g|= 6.39731e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.0164889300848  |g|= 6.39731e-08  total 4 KF 14 JK
converged SCF energy = -15.0164889300848

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpm5pz1kmw
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.0458527889374  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.0460680194773  dE = -0.00021523054  S^2 = 0.0000000
               |grad[o]|=0.00779  |grad[c]|= 0.0007604382435093142  |ddm|=0.000316
macro iter 2 (4 JK  2 micro), CASSCF E = -15.0461472814163  dE = -7.9261939e-05  S^2 = 0.0000000
               |grad[o]|=0.00405  |grad[c]|= 0.00046171407582675785  |ddm|=0.000386
macro iter 3 (3 JK  1 micro), CASSCF E = -15.0461478081679  dE = -5.2675167e-07  S^2 = 0.0000000
               |grad[o]|=0.000322  |grad[c]|= 8.680923185454057e-05  |ddm|=5.44e-05
macro iter 4 (1 JK  1 micro), CASSCF E = -15.0461478081743  dE = -6.3575811e-12  S^2 = 0.0000000
               |grad[o]|=5.15e-06  |grad[c]|= 3.677749485181391e-06  |ddm|=6.9e-07
1-step CASSCF converged in 4 macro (11 JK 5 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.98867462 1.96646421 0.00396484 0.01311279 0.01389177 0.01389177]
CASSCF energy = -15.0461478081743
CASCI E = -15.0461478081743  E(CI) = -4.86071224331651  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.045852788940184
Ground state energy (pad)  -15.045852788940184
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:37: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  trace_value = np.sum(matrix.dot(pauli.to_spmatrix()).diagonal())
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_h2o_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quRUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:30:37 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.900000000000 AA    0.000000000000   0.000000000000   1.700753512109 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -0.900000000000 AA    0.000000000000   0.000000000000  -1.700753512109 Bohr

nuclear repulsion = 4.9977847698
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       110.26

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp66qc25jd
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp66qc25jd
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.962423132656619  LUMO (E1y) = -0.552165762814414
Initial guess E= -15.5016462028802  |g|= 0.156589
macro= 0  E= -15.5095565480939  delta_E= -0.00791035  |g|= 0.156589  1 KF 4 JK
macro= 1  E= -15.5095565761397  delta_E= -2.80458e-08  |g|= 0.000279075  1 KF 3 JK
macro= 2  E= -15.5095565761398  delta_E= -7.10543e-15  |g|= 4.22304e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.5095565761398  |g|= 4.22304e-06  total 4 KF 13 JK
converged SCF energy = -15.5095565761398

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp66qc25jd
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.5347283777789  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.5348514247775  dE = -0.000123047  S^2 = 0.0000000
               |grad[o]|=0.00492  |grad[c]|= 0.0007293693283019543  |ddm|=0.0003
macro iter 2 (3 JK  1 micro), CASSCF E = -15.5348813408964  dE = -2.9916119e-05  S^2 = 0.0000000
               |grad[o]|=0.00217  |grad[c]|= 0.0005806751522652143  |ddm|=0.00011
macro iter 3 (1 JK  1 micro), CASSCF E = -15.5348813412848  dE = -3.8841819e-10  S^2 = 0.0000000
               |grad[o]|=1.48e-05  |grad[c]|= 2.5225569370384316e-05  |ddm|=1.67e-05
1-step CASSCF converged in 3 macro (7 JK 3 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.97604315 1.98920143 0.00428217 0.01287385 0.0087997  0.0087997 ]
CASSCF energy = -15.5348813412848
CASCI E = -15.5348813412848  E(CI) = -4.59311418846223  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.534728377783225
Ground state energy (pad)  -15.534728377783225
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/quantum_info/operators/symplectic/pauli.py:185: DeprecationWarning: Initializing Pauli from `Pauli(z=z, x=x)` kwargs is deprecated as of version 0.17.0 and will be removed no earlier than 3 months after the release date. Use tuple initialization `Pauli((z, x))` instead.
  base_z, base_x, base_phase = self._from_array_deprecated(z, x)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/primitive_ops/pauli_op.py:94: DeprecationWarning: `kron` is deprecated and will be removed no earlier than 3 months after the release date of Qiskit Terra 0.17.0. Use `expand` instead, but note this does not change the operator in-place.
  return PauliOp(op_copy.kron(self.primitive), coeff=self.coeff * other.coeff)
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/primitive_ops/pauli_op.py:164: DeprecationWarning: `to_spmatrix` is deprecated and will be removed no earlier than 3 months after the release date. Use `to_matrix(sparse=True)` instead.
  return self.primitive.to_spmatrix() * self.coeff  # type: ignore
gather_beh2_results_ry_linear.py:26: DeprecationWarning: Back-references to from Bit instances to their containing Registers have been deprecated. Instead, inspect Registers to find their contained Bits.
  qubits = [q.index for q in gate[1]]
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.fRUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_h2o_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:32:22 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.100000000000 AA    0.000000000000   0.000000000000   2.078698737022 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.100000000000 AA    0.000000000000   0.000000000000  -2.078698737022 Bohr

nuclear repulsion = 4.08909662983636
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       212.84

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpwlnrpo31
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpwlnrpo31
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.867861147311336  LUMO (E1y) = -0.478632358287946
Initial guess E= -15.6868549990052  |g|= 0.0831913
macro= 0  E= -15.6892332215434  delta_E= -0.00237822  |g|= 0.0831913  1 KF 4 JK
macro= 1  E= -15.6892332216918  delta_E= -1.48457e-10  |g|= 1.70654e-05  1 KF 3 JK
Canonicalize SCF orbitals
macro X = 2  E=-15.6892332216918  |g|= 1.70654e-05  total 3 KF 10 JK
converged SCF energy = -15.6892332216918

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpwlnrpo31
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.7165099100631  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (4 JK  2 micro), CASSCF E = -15.7165873884069  dE = -7.7478344e-05  S^2 = 0.0000000
               |grad[o]|=0.00369  |grad[c]|= 0.00042261943489629405  |ddm|=0.00036
macro iter 2 (3 JK  1 micro), CASSCF E = -15.7165924482166  dE = -5.0598098e-06  S^2 = 0.0000000
               |grad[o]|=0.000903  |grad[c]|= 0.0002408038830207811  |ddm|=6.78e-05
macro iter 3 (1 JK  1 micro), CASSCF E = -15.7165924482854  dE = -6.8807182e-11  S^2 = 0.0000000
               |grad[o]|=7.3e-06  |grad[c]|= 1.053376309169842e-05  |ddm|=4.89e-06
1-step CASSCF converged in 3 macro (8 JK 4 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.97609104 1.98556582 0.00703664 0.01692898 0.00718876 0.00718876]
CASSCF energy = -15.7165924482854
CASCI E = -15.7165924482854  E(CI) = -4.29117805776105  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.716509910085525
Ground state energy (pad)  -15.716509910085525
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after theRUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_h2o_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculationRUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:34:33 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.300000000000 AA    0.000000000000   0.000000000000   2.456643961935 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.300000000000 AA    0.000000000000   0.000000000000  -2.456643961935 Bohr

nuclear repulsion = 3.46000484063077
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       338.54

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpw3l_kmvn
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpw3l_kmvn
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.76438777253455  LUMO (E1y) = -0.401418183031037
Initial guess E= -15.7242818820011  |g|= 0.0604828
macro= 0  E= -15.7258077879644  delta_E= -0.00152591  |g|= 0.0604828  1 KF 4 JK
macro= 1  E= -15.7258077933436  delta_E= -5.37923e-09  |g|= 0.000117803  1 KF 3 JK
macro= 2  E= -15.7258077933436  delta_E= -3.55271e-15  |g|= 8.12394e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.7258077933436  |g|= 8.12394e-06  total 4 KF 13 JK
converged SCF energy = -15.7258077933436

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpw3l_kmvn
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.7593587403141  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.7594079420923  dE = -4.9201778e-05  S^2 = 0.0000000
               |grad[o]|=0.00317  |grad[c]|= 0.0007180585759569547  |ddm|=0.000368
macro iter 2 (1 JK  1 micro), CASSCF E = -15.7594079428875  dE = -7.9524654e-10  S^2 = 0.0000000
               |grad[o]|=2.63e-05  |grad[c]|= 3.248968171278245e-05  |ddm|=1.14e-05
1-step CASSCF converged in 2 macro (4 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.97069143 1.97664118 0.01271962 0.02657319 0.00668729 0.00668729]
CASSCF energy = -15.7594079428875
CASCI E = -15.7594079428875  E(CI) = -3.99899521493629  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.759358740522778
Ground state energy (pad)  -15.759358740522778
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_h2o_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/DocuRUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:36:13 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.500000000000 AA    0.000000000000   0.000000000000   2.834589186848 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.500000000000 AA    0.000000000000   0.000000000000  -2.834589186848 Bohr

nuclear repulsion = 2.99867086188
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       437.38

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpnw7lngkc
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpnw7lngkc
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.659377120008162  LUMO (E1y) = -0.323704247937121
Initial guess E= -15.6926711424918  |g|= 0.0658654
macro= 0  E= -15.6951396752461  delta_E= -0.00246853  |g|= 0.0658654  1 KF 4 JK
macro= 1  E= -15.6951397274123  delta_E= -5.21661e-08  |g|= 0.00032029  1 KF 4 JK
macro= 2  E= -15.6951397274123  delta_E= 7.10543e-15  |g|= 3.54503e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.6951397274123  |g|= 3.54503e-09  total 4 KF 14 JK
converged SCF energy = -15.6951397274123

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpnw7lngkc
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.7388893806085  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.7389228901295  dE = -3.3509521e-05  S^2 = 0.0000000
               |grad[o]|=0.00303  |grad[c]|= 0.0005043273260108029  |ddm|=0.000328
macro iter 2 (1 JK  1 micro), CASSCF E = -15.7389228903922  dE = -2.6266811e-10  S^2 = 0.0000000
               |grad[o]|=2.38e-05  |grad[c]|= 1.875856148639547e-05  |ddm|=7.95e-06
1-step CASSCF converged in 2 macro (4 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.95930112 1.95938937 0.02256882 0.04487287 0.00693391 0.00693391]
CASSCF energy = -15.7389228903922
CASCI E = -15.7389228903922  E(CI) = -3.73337306362397  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.738889380648272
Ground state energy (pad)  -15.73888938064827
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/UsRUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_h2o_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:37:37 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.700000000000 AA    0.000000000000   0.000000000000   3.212534411761 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.700000000000 AA    0.000000000000   0.000000000000  -3.212534411761 Bohr

nuclear repulsion = 2.6458860546
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       521.44

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpd473hk43
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpd473hk43
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.558155882300186  LUMO (E1y) = -0.248159027530499
Initial guess E= -15.627964778305  |g|= 0.082458
macro= 0  E= -15.632792741742  delta_E= -0.00482796  |g|= 0.082458  1 KF 4 JK
macro= 1  E= -15.632793320802  delta_E= -5.7906e-07  |g|= 0.000965357  1 KF 4 JK
macro= 2  E= -15.632793320802  delta_E= 0  |g|= 5.95868e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.632793320802  |g|= 5.95868e-08  total 4 KF 14 JK
converged SCF energy = -15.632793320802

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpd473hk43
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.6912995455991  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.6913270657499  dE = -2.7520151e-05  S^2 = 0.0000000
               |grad[o]|=0.0032  |grad[c]|= 0.0003808191775753635  |ddm|=0.000327
macro iter 2 (1 JK  1 micro), CASSCF E = -15.6913270659126  dE = -1.6268586e-10  S^2 = 0.0000000
               |grad[o]|=2.22e-05  |grad[c]|= 1.4443997517454036e-05  |ddm|=1.29e-05
1-step CASSCF converged in 2 macro (4 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.93991027 1.92784051 0.03841455 0.0776214  0.00810664 0.00810664]
CASSCF energy = -15.6913270659126
CASCI E = -15.6913270659126  E(CI) = -3.49866861949243  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.691299545621822
Ground state energy (pad)  -15.691299545621822
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qRUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_h2o_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubiRUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:38:55 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.900000000000 AA    0.000000000000   0.000000000000   3.590479636674 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.900000000000 AA    0.000000000000   0.000000000000  -3.590479636674 Bohr

nuclear repulsion = 2.36737173306316
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       599.11

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmptd87g8_a
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmptd87g8_a
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.464243752047602  LUMO (E1y) = -0.176432769613011
Initial guess E= -15.5471504570026  |g|= 0.106882
macro= 0  E= -15.5566705993414  delta_E= -0.00952014  |g|= 0.106882  1 KF 4 JK
macro= 1  E= -15.5566781105713  delta_E= -7.51123e-06  |g|= 0.00324787  1 KF 4 JK
macro= 2  E= -15.5566781105713  delta_E= -3.55271e-15  |g|= 1.21522e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.5566781105713  |g|= 1.21522e-06  total 4 KF 14 JK
converged SCF energy = -15.5566781105713

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmptd87g8_a
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.6355607706627  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.6355892061788  dE = -2.8435516e-05  S^2 = 0.0000000
               |grad[o]|=0.00372  |grad[c]|= 0.00031894961359914026  |ddm|=0.000404
macro iter 2 (1 JK  1 micro), CASSCF E = -15.6355892064365  dE = -2.5768365e-10  S^2 = 0.0000000
               |grad[o]|=2.31e-05  |grad[c]|= 1.5934128973095967e-05  |ddm|=2.52e-05
1-step CASSCF converged in 2 macro (4 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.91018162 1.87100048 0.06218613 0.13490023 0.01086577 0.01086577]
CASSCF energy = -15.6355892064365
CASCI E = -15.6355892064365  E(CI) = -3.2953825173078  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.635560770672962
Ground state energy (pad)  -15.635560770672964
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:40:15 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.100000000000 AA    0.000000000000   0.000000000000   3.968424861587 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -2.100000000000 AA    0.000000000000   0.000000000000  -3.968424861587 Bohr

nuclear repulsion = 2.14190775848571
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       679.58

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpfi8wdrba
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpfi8wdrba
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.380371007267217  LUMO (A1) = -0.15786755131346
Initial guess E= -15.4580838391602  |g|= 0.138981
macro= 0  E= -15.4754429279898  delta_E= -0.0173591  |g|= 0.138981  2 KF 5 JK
macro= 1  E= -15.4766029763846  delta_E= -0.00116005  |g|= 0.0332798  1 KF 4 JK
macro= 2  E= -15.4766030445328  delta_E= -6.81481e-08  |g|= 0.000289843  1 KF 4 JK
macro= 3  E= -15.4766030445328  delta_E= -3.55271e-15  |g|= 1.65693e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.4766030445328  |g|= 1.65693e-08  total 6 KF 20 JK
converged SCF energy = -15.4766030445328

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpfi8wdrba
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.5827941566852  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.5828323471189  dE = -3.8190434e-05  S^2 = 0.0000000
               |grad[o]|=0.00486  |grad[c]|= 0.0003086590660116572  |ddm|=0.000649
macro iter 2 (3 JK  1 micro), CASSCF E = -15.5828323491789  dE = -2.0600197e-09  S^2 = 0.0000000
               |grad[o]|=3e-05  |grad[c]|= 2.3448935473391868e-05  |ddm|=5.66e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.86882962 1.76882888 0.23449595 0.09427271 0.01678642 0.01678642]
CASSCF energy = -15.5828323491789
CASCI E = -15.5828323491789  E(CI) = -3.1232759942695  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.582794157048156
Ground state energy (pad)  -15.582794157048156
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:41:36 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.300000000000 AA    0.000000000000   0.000000000000   4.346370086500 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -2.300000000000 AA    0.000000000000   0.000000000000  -4.346370086500 Bohr

nuclear repulsion = 1.95565490992174
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       760.35

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp96r4l_69
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp96r4l_69
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.308886709380645  LUMO (A1) = -0.137799359104182
Initial guess E= -15.3648694916786  |g|= 0.173002
macro= 0  E= -15.3983844823934  delta_E= -0.033515  |g|= 0.011368  2 KF 6 JK
macro= 1  E= -15.3984702623871  delta_E= -8.578e-05  |g|= 0.011368  1 KF 4 JK
macro= 2  E= -15.398470262861  delta_E= -4.73978e-10  |g|= 1.86637e-05  1 KF 3 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.398470262861  |g|= 1.86637e-05  total 5 KF 17 JK
converged SCF energy = -15.398470262861

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp96r4l_69
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.540439803505  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.5405074230689  dE = -6.7619564e-05  S^2 = 0.0000000
               |grad[o]|=0.00731  |grad[c]|= 0.00033759501534515244  |ddm|=0.00158
macro iter 2 (3 JK  1 micro), CASSCF E = -15.5405074259242  dE = -2.8553124e-09  S^2 = 0.0000000
               |grad[o]|=5.83e-05  |grad[c]|= 8.872957560089297e-06  |ddm|=5.78e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.8163423  1.58878205 0.40720073 0.1299597  0.02885761 0.02885761]
CASSCF energy = -15.5405074259242
CASCI E = -15.5405074259242  E(CI) = -2.98246676240698  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.540439803580043
Ground state energy (pad)  -15.540439803580043
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:43:00 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.500000000000 AA    0.000000000000   0.000000000000   4.724315311413 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -2.500000000000 AA    0.000000000000   0.000000000000  -4.724315311413 Bohr

nuclear repulsion = 1.799202517128
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       843.43

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpu6zwwfx5
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpu6zwwfx5
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.251416414918695  LUMO (A1) = -0.117194808455083
Initial guess E= -15.2742179409377  |g|= 0.193594
macro= 0  E= -15.3227550205085  delta_E= -0.0485371  |g|= 0.193594  1 KF 5 JK
macro= 1  E= -15.3261394527397  delta_E= -0.00338443  |g|= 0.0501781  1 KF 4 JK
macro= 2  E= -15.3261443640345  delta_E= -4.91129e-06  |g|= 0.00230286  1 KF 4 JK
macro= 3  E= -15.3261443640352  delta_E= -7.74492e-13  |g|= 2.63748e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.3261443640352  |g|= 2.63748e-06  total 5 KF 20 JK
converged SCF energy = -15.3261443640352

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpu6zwwfx5
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.5135145017485  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.5136523097756  dE = -0.00013780803  S^2 = 0.0000000
               |grad[o]|=0.0115  |grad[c]|= 0.0004192565972056063  |ddm|=0.00342
macro iter 2 (3 JK  1 micro), CASSCF E = -15.5136523181586  dE = -8.3830098e-09  S^2 = 0.0000000
               |grad[o]|=0.000128  |grad[c]|= 1.908536942368955e-05  |ddm|=2.96e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.75395821 1.32327203 0.66881617 0.1581158  0.04791889 0.04791889]
CASSCF energy = -15.5136523181586
CASCI E = -15.5136523181586  E(CI) = -2.87312580763294  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.513514501909526
Ground state energy (pad)  -15.513514501909528
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:44:06 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.700000000000 AA    0.000000000000   0.000000000000   5.102260536326 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -2.700000000000 AA    0.000000000000   0.000000000000  -5.102260536326 Bohr

nuclear repulsion = 1.6659282566
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       909.53

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpckv3wis1
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpckv3wis1
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.207907359650373  LUMO (A1) = -0.0978093465028038
Initial guess E= -15.1995633598786  |g|= 0.187235
macro= 0  E= -15.2525175525924  delta_E= -0.0529542  |g|= 0.187235  1 KF 5 JK
macro= 1  E= -15.2618212595257  delta_E= -0.00930371  |g|= 0.0795055  2 KF 5 JK
macro= 2  E= -15.262306331721  delta_E= -0.000485072  |g|= 0.0158694  1 KF 4 JK
macro= 3  E= -15.2623063981066  delta_E= -6.63857e-08  |g|= 0.000254726  1 KF 4 JK
macro= 4  E= -15.2623063981066  delta_E= 3.55271e-15  |g|= 5.1624e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 5  E=-15.2623063981066  |g|= 5.1624e-08  total 7 KF 26 JK
converged SCF energy = -15.2623063981066

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpckv3wis1
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.5016164744416  S^2 = 0.0000005
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.5018466221103  dE = -0.00023014767  S^2 = 0.0000000
               |grad[o]|=0.0152  |grad[c]|= 0.0005551784262089994  |ddm|=0.0036
macro iter 2 (3 JK  1 micro), CASSCF E = -15.5018466374956  dE = -1.5385311e-08  S^2 = 0.0000000
               |grad[o]|=0.000165  |grad[c]|= 2.2780781113567316e-05  |ddm|=0.000116
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.69844922 1.09197072 0.91090484 0.17131079 0.06368222 0.06368222]
CASSCF energy = -15.5018466374956
CASCI E = -15.5018466374956  E(CI) = -2.79132318834697  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.501616492771776
Ground state energy (pad)  -15.501616492771776
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:45:15 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.900000000000 AA    0.000000000000   0.000000000000   5.480205761239 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -2.900000000000 AA    0.000000000000   0.000000000000  -5.480205761239 Bohr

nuclear repulsion = 1.55103665269655
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:       979.36

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp2zd1kmrt
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp2zd1kmrt
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.176242924927914  LUMO (A1) = -0.0806216641757186
Initial guess E= -15.1512207512846  |g|= 0.158906
macro= 0  E= -15.198014595925  delta_E= -0.0467938  |g|= 0.158906  1 KF 5 JK
macro= 1  E= -15.2088551960898  delta_E= -0.0108406  |g|= 0.00871576  2 KF 6 JK
macro= 2  E= -15.2088586024338  delta_E= -3.40634e-06  |g|= 0.00167971  1 KF 4 JK
macro= 3  E= -15.2088586024339  delta_E= -8.52651e-14  |g|= 3.76033e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.2088586024339  |g|= 3.76033e-06  total 6 KF 22 JK
converged SCF energy = -15.2088586024339

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp2zd1kmrt
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4980546798713  S^2 = 0.0000001
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4983398886052  dE = -0.00028520873  S^2 = 0.0000000
               |grad[o]|=0.0167  |grad[c]|= 0.0006639343141253524  |ddm|=0.00251
macro iter 2 (3 JK  1 micro), CASSCF E = -15.4983399023318  dE = -1.3726622e-08  S^2 = 0.0000000
               |grad[o]|=0.000138  |grad[c]|= 2.3941422637019684e-05  |ddm|=3.21e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.67702077 0.98585818 1.0299658  0.16707394 0.07004065 0.07004065]
CASSCF energy = -15.4983399023318
CASCI E = -15.4983399023318  E(CI) = -2.72742611326176  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.498054681627915
Ground state energy (pad)  -15.498054681627913
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:46:21 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.100000000000 AA    0.000000000000   0.000000000000   5.858150986152 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -3.100000000000 AA    0.000000000000   0.000000000000  -5.858150986152 Bohr

nuclear repulsion = 1.45096977187742
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1045.34

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp2whrnz94
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp2whrnz94
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.153514473760504  LUMO (A1) = -0.0662687798241129
Initial guess E= -15.1258645289656  |g|= 0.123322
macro= 0  E= -15.1609412255474  delta_E= -0.0350767  |g|= 0.123322  1 KF 5 JK
macro= 1  E= -15.1666879009191  delta_E= -0.00574668  |g|= 0.0489865  2 KF 5 JK
macro= 2  E= -15.1670167034756  delta_E= -0.000328803  |g|= 0.0089159  1 KF 4 JK
macro= 3  E= -15.1670167625562  delta_E= -5.90807e-08  |g|= 0.000211372  1 KF 4 JK
macro= 4  E= -15.1670167625563  delta_E= -7.10543e-15  |g|= 8.21062e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 5  E=-15.1670167625563  |g|= 8.21062e-08  total 7 KF 26 JK
converged SCF energy = -15.1670167625563

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp2whrnz94
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4973538258551  S^2 = 0.0000001
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4976565224434  dE = -0.00030269659  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007122439418499407  |ddm|=0.00174
macro iter 2 (3 JK  1 micro), CASSCF E = -15.4976565328722  dE = -1.0428817e-08  S^2 = 0.0000000
               |grad[o]|=0.000107  |grad[c]|= 1.3411663881679244e-05  |ddm|=2.33e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.68737887 0.96105328 1.0612153  0.14689037 0.07173109 0.07173109]
CASSCF energy = -15.4976565328722
CASCI E = -15.4976565328722  E(CI) = -2.67395369870377  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.49735382874505
Ground state energy (pad)  -15.497353828745052
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:47:28 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.300000000000 AA    0.000000000000   0.000000000000   6.236096211065 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -3.300000000000 AA    0.000000000000   0.000000000000  -6.236096211065 Bohr

nuclear repulsion = 1.36303220994545
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1112.71

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpgy2v3b78
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpgy2v3b78
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.137625111424889  LUMO (A1) = -0.0556901883933211
Initial guess E= -15.1131501597907  |g|= 0.0903873
macro= 0  E= -15.135503680363  delta_E= -0.0223535  |g|= 0.0903873  1 KF 5 JK
macro= 1  E= -15.1369610464653  delta_E= -0.00145737  |g|= 0.0190089  1 KF 4 JK
macro= 2  E= -15.1369610514212  delta_E= -4.95592e-09  |g|= 0.00012696  1 KF 4 JK
macro= 3  E= -15.1369610514212  delta_E= 0  |g|= 2.21724e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.1369610514212  |g|= 2.21724e-09  total 5 KF 20 JK
converged SCF energy = -15.1369610514212

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpgy2v3b78
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.497386669842  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4976915264393  dE = -0.0003048566  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007185180765835858  |ddm|=0.00153
macro iter 2 (3 JK  1 micro), CASSCF E = -15.4976915357636  dE = -9.3242942e-09  S^2 = 0.0000000
               |grad[o]|=9.48e-05  |grad[c]|= 1.8621623629379647e-05  |ddm|=2.11e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.71323071 0.96903279 1.0536767  0.11997316 0.07204332 0.07204332]
CASSCF energy = -15.4976915357636
CASCI E = -15.4976915357636  E(CI) = -2.62749550613226  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.497386670249604
Ground state energy (pad)  -15.497386670249604
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:48:44 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.500000000000 AA    0.000000000000   0.000000000000   6.614041435978 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -3.500000000000 AA    0.000000000000   0.000000000000  -6.614041435978 Bohr

nuclear repulsion = 1.28514465509143
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1187.77

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjbvme1pw
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjbvme1pw
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.127413262463824  LUMO (A1) = -0.0498665499732821
Initial guess E= -15.1053728998706  |g|= 0.0638798
macro= 0  E= -15.11669004727  delta_E= -0.0113171  |g|= 0.0638798  2 KF 6 JK
macro= 1  E= -15.1172479969046  delta_E= -0.00055795  |g|= 0.0111286  1 KF 4 JK
macro= 2  E= -15.1172481596837  delta_E= -1.62779e-07  |g|= 0.000312962  1 KF 3 JK
macro= 3  E= -15.1172481596837  delta_E= -7.10543e-15  |g|= 4.62782e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.1172481596837  |g|= 4.62782e-06  total 6 KF 20 JK
converged SCF energy = -15.1172481596837

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjbvme1pw
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4975373825317  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4978411303296  dE = -0.0003037478  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007336918691651365  |ddm|=0.00154
macro iter 2 (3 JK  1 micro), CASSCF E = -15.4978411397429  dE = -9.4133412e-09  S^2 = 0.0000000
               |grad[o]|=9.46e-05  |grad[c]|= 1.4115137570516335e-05  |ddm|=2.8e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.73942905 0.98273017 1.03613393 0.09765448 0.07202619 0.07202619]
CASSCF energy = -15.4978411397429
CASCI E = -15.4978411397429  E(CI) = -2.58642855248588  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.49753738520455
Ground state energy (pad)  -15.497537385204552
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:49:54 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.700000000000 AA    0.000000000000   0.000000000000   6.991986660891 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -3.700000000000 AA    0.000000000000   0.000000000000  -6.991986660891 Bohr

nuclear repulsion = 1.21567737643784
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1257.77

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpeb89fshx
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpeb89fshx
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.121533314404122  LUMO (A1) = -0.0483171155944131
Initial guess E= -15.099636068089  |g|= 0.044208
macro= 0  E= -15.105025581721  delta_E= -0.00538951  |g|= 0.044208  1 KF 4 JK
macro= 1  E= -15.1051138391309  delta_E= -8.82574e-05  |g|= 0.0062329  1 KF 4 JK
macro= 2  E= -15.1051139570103  delta_E= -1.17879e-07  |g|= 0.000154535  1 KF 4 JK
macro= 3  E= -15.1051139570104  delta_E= -1.77636e-14  |g|= 9.3111e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.1051139570104  |g|= 9.3111e-06  total 5 KF 19 JK
converged SCF energy = -15.1051139570104

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpeb89fshx
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4976607526072  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4979638957241  dE = -0.00030314312  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007298655929099138  |ddm|=0.00152
macro iter 2 (3 JK  1 micro), CASSCF E = -15.4979639047505  dE = -9.0264027e-09  S^2 = 0.0000000
               |grad[o]|=9.28e-05  |grad[c]|= 9.190307696617638e-06  |ddm|=2.39e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.75866325 0.99192056 1.02120942 0.08428699 0.0719599  0.0719599 ]
CASSCF energy = -15.4979639047505
CASCI E = -15.4979639047505  E(CI) = -2.54977912579247  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.497660753513562
Ground state energy (pad)  -15.497660753513554
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:51:00 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.900000000000 AA    0.000000000000   0.000000000000   7.369931885804 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -3.900000000000 AA    0.000000000000   0.000000000000  -7.369931885804 Bohr

nuclear repulsion = 1.15333494687692
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1324.38

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp8pt4wbbu
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp8pt4wbbu
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.118241083867891  LUMO (A1) = -0.0492086674038972
Initial guess E= -15.0953106247439  |g|= 0.0303116
macro= 0  E= -15.0977620269827  delta_E= -0.0024514  |g|= 0.0303116  1 KF 4 JK
macro= 1  E= -15.0977720117831  delta_E= -9.9848e-06  |g|= 0.0018227  1 KF 4 JK
macro= 2  E= -15.0977720137561  delta_E= -1.97305e-09  |g|= 1.93793e-05  1 KF 3 JK
macro= 3  E= -15.0977720137561  delta_E= 1.06581e-14  |g|= 6.24108e-07  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 4  E=-15.0977720137561  |g|= 6.24108e-07  total 5 KF 18 JK
converged SCF energy = -15.0977720137561

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp8pt4wbbu
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4977399412681  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4980431604307  dE = -0.00030321916  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007277048545761374  |ddm|=0.00151
macro iter 2 (3 JK  1 micro), CASSCF E = -15.49804316938  dE = -8.9493319e-09  S^2 = 0.0000000
               |grad[o]|=9.21e-05  |grad[c]|= 9.483077208195116e-06  |ddm|=2.54e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.77076311 0.99648856 1.01132911 0.07760899 0.07190512 0.07190512]
CASSCF energy = -15.49804316938
CASCI E = -15.49804316938  E(CI) = -2.51685442292749  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.49773994240878
Ground state energy (pad)  -15.49773994240878
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:52:13 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   4.100000000000 AA    0.000000000000   0.000000000000   7.747877110717 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -4.100000000000 AA    0.000000000000   0.000000000000  -7.747877110717 Bohr

nuclear repulsion = 1.09707470556585
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1397.33

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjxhqqm6d
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjxhqqm6d
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.116141255019476  LUMO (A1) = -0.0508995014495959
Initial guess E= -15.0921110178012  |g|= 0.0207402
macro= 0  E= -15.0932165566963  delta_E= -0.00110554  |g|= 0.0207402  1 KF 4 JK
macro= 1  E= -15.0932176590761  delta_E= -1.10238e-06  |g|= 0.000550572  1 KF 4 JK
macro= 2  E= -15.0932176590798  delta_E= -3.71259e-12  |g|= 8.05741e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.0932176590798  |g|= 8.05741e-06  total 4 KF 14 JK
converged SCF energy = -15.0932176590798

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjxhqqm6d
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4977860044439  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4980894926928  dE = -0.00030348825  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007265803261898315  |ddm|=0.0015
macro iter 2 (2 JK  1 micro), CASSCF E = -15.4980895015185  dE = -8.825765e-09  S^2 = 0.0000000
               |grad[o]|=9.18e-05  |grad[c]|= 7.691728394209087e-06  |ddm|=2.23e-05
1-step CASSCF converged in 2 macro (5 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.77765805 0.99849932 1.00559096 0.07450912 0.07187128 0.07187128]
CASSCF energy = -15.4980895015185
CASCI E = -15.4980895015185  E(CI) = -2.48711587384078  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.497786005146803
Ground state energy (pad)  -15.497786005146803
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:53:29 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   4.300000000000 AA    0.000000000000   0.000000000000   8.125822335630 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -4.300000000000 AA    0.000000000000   0.000000000000  -8.125822335630 Bohr

nuclear repulsion = 1.04604797507442
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1472.78

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpsmethbgi
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpsmethbgi
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.114504783151589  LUMO (A1) = -0.0525896639722248
Initial guess E= -15.0897224919258  |g|= 0.0142091
macro= 0  E= -15.0902249664485  delta_E= -0.000502475  |g|= 0.0142091  1 KF 4 JK
macro= 1  E= -15.0902250844524  delta_E= -1.18004e-07  |g|= 0.000172165  1 KF 3 JK
macro= 2  E= -15.0902250844525  delta_E= -4.26326e-14  |g|= 9.08862e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.0902250844525  |g|= 9.08862e-06  total 4 KF 13 JK
converged SCF energy = -15.0902250844525

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpsmethbgi
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4978113893001  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4981150901167  dE = -0.00030370082  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007277238195830752  |ddm|=0.0015
macro iter 2 (2 JK  1 micro), CASSCF E = -15.4981150990099  dE = -8.8931706e-09  S^2 = 0.0000000
               |grad[o]|=9.2e-05  |grad[c]|= 1.0185459247406818e-05  |ddm|=2.06e-05
1-step CASSCF converged in 2 macro (5 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.78126219 0.99935314 1.00259411 0.07308806 0.07185125 0.07185125]
CASSCF energy = -15.4981150990099
CASCI E = -15.4981150990099  E(CI) = -2.46012713969964  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.497811389613107
Ground state energy (pad)  -15.497811389613107
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:54:39 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   4.500000000000 AA    0.000000000000   0.000000000000   8.503767560543 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -4.500000000000 AA    0.000000000000   0.000000000000  -8.503767560543 Bohr

nuclear repulsion = 0.99955695396
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1543.06

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjhtkf01b
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjhtkf01b
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.113071589447658  LUMO (A1) = -0.0540771762830671
Initial guess E= -15.0878699626904  |g|= 0.00975348
macro= 0  E= -15.0881005254448  delta_E= -0.000230563  |g|= 0.00975348  1 KF 4 JK
macro= 1  E= -15.088100537858  delta_E= -1.24132e-08  |g|= 5.5312e-05  1 KF 3 JK
macro= 2  E= -15.088100537858  delta_E= -7.10543e-15  |g|= 3.09129e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.088100537858  |g|= 3.09129e-06  total 4 KF 13 JK
converged SCF energy = -15.088100537858

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpjhtkf01b
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.4978248709341  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.4981286848667  dE = -0.00030381393  S^2 = 0.0000000
               |grad[o]|=0.0172  |grad[c]|= 0.0007314723031579374  |ddm|=0.00152
macro iter 2 (2 JK  1 micro), CASSCF E = -15.4981286938704  dE = -9.0036831e-09  S^2 = 0.0000000
               |grad[o]|=9.27e-05  |grad[c]|= 7.4805312851764205e-06  |ddm|=2.23e-05
1-step CASSCF converged in 2 macro (5 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.78301713 0.99971651 1.00115908 0.07242747 0.07183991 0.07183991]
CASSCF energy = -15.4981286938704
CASCI E = -15.4981286938704  E(CI) = -2.43552767318847  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.497824872034117
Ground state energy (pad)  -15.497824872034117
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:55:52 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.700000000000 AA    0.000000000000   0.000000000000   1.322808287196 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -0.700000000000 AA    0.000000000000   0.000000000000  -1.322808287196 Bohr

nuclear repulsion = 6.42572327545714
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1615.05

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpe2qnwjno
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpe2qnwjno
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -1.04037315571274  LUMO (E1y) = -0.612976046672663
Initial guess E= -14.9901539977451  |g|= 0.289921
macro= 0  E= -15.0164866086203  delta_E= -0.0263326  |g|= 0.289921  1 KF 4 JK
macro= 1  E= -15.0164889300848  delta_E= -2.32146e-06  |g|= 0.00217983  1 KF 4 JK
macro= 2  E= -15.0164889300848  delta_E= 7.10543e-15  |g|= 6.39731e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.0164889300848  |g|= 6.39731e-08  total 4 KF 14 JK
converged SCF energy = -15.0164889300848

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpe2qnwjno
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.0458527889374  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.0460680194773  dE = -0.00021523054  S^2 = 0.0000000
               |grad[o]|=0.00779  |grad[c]|= 0.0007604382435093142  |ddm|=0.000316
macro iter 2 (4 JK  2 micro), CASSCF E = -15.0461472814163  dE = -7.9261939e-05  S^2 = 0.0000000
               |grad[o]|=0.00405  |grad[c]|= 0.00046171407582675785  |ddm|=0.000386
macro iter 3 (3 JK  1 micro), CASSCF E = -15.0461478081679  dE = -5.2675167e-07  S^2 = 0.0000000
               |grad[o]|=0.000322  |grad[c]|= 8.680923185454057e-05  |ddm|=5.44e-05
macro iter 4 (1 JK  1 micro), CASSCF E = -15.0461478081743  dE = -6.3575811e-12  S^2 = 0.0000000
               |grad[o]|=5.15e-06  |grad[c]|= 3.677749485181391e-06  |ddm|=6.9e-07
1-step CASSCF converged in 4 macro (11 JK 5 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.98867462 1.96646421 0.00396484 0.01311279 0.01389177 0.01389177]
CASSCF energy = -15.0461478081743
CASCI E = -15.0461478081743  E(CI) = -4.86071224331651  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.045852788940184
Ground state energy (pad)  -15.045852788940184
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:57:05 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   0.900000000000 AA    0.000000000000   0.000000000000   1.700753512109 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -0.900000000000 AA    0.000000000000   0.000000000000  -1.700753512109 Bohr

nuclear repulsion = 4.9977847698
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1688.32

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpo26zjb9v
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpo26zjb9v
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.962423132656619  LUMO (E1y) = -0.552165762814414
Initial guess E= -15.5016462028802  |g|= 0.156589
macro= 0  E= -15.5095565480939  delta_E= -0.00791035  |g|= 0.156589  1 KF 4 JK
macro= 1  E= -15.5095565761397  delta_E= -2.80458e-08  |g|= 0.000279075  1 KF 3 JK
macro= 2  E= -15.5095565761398  delta_E= -7.10543e-15  |g|= 4.22304e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.5095565761398  |g|= 4.22304e-06  total 4 KF 13 JK
converged SCF energy = -15.5095565761398

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpo26zjb9v
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.5347283777789  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.5348514247775  dE = -0.000123047  S^2 = 0.0000000
               |grad[o]|=0.00492  |grad[c]|= 0.0007293693283019543  |ddm|=0.0003
macro iter 2 (3 JK  1 micro), CASSCF E = -15.5348813408964  dE = -2.9916119e-05  S^2 = 0.0000000
               |grad[o]|=0.00217  |grad[c]|= 0.0005806751522652143  |ddm|=0.00011
macro iter 3 (1 JK  1 micro), CASSCF E = -15.5348813412848  dE = -3.8841819e-10  S^2 = 0.0000000
               |grad[o]|=1.48e-05  |grad[c]|= 2.5225569370384316e-05  |ddm|=1.67e-05
1-step CASSCF converged in 3 macro (7 JK 3 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.97604315 1.98920143 0.00428217 0.01287385 0.0087997  0.0087997 ]
CASSCF energy = -15.5348813412848
CASCI E = -15.5348813412848  E(CI) = -4.59311418846223  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.534728377783225
Ground state energy (pad)  -15.534728377783225
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:58:19 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.100000000000 AA    0.000000000000   0.000000000000   2.078698737022 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.100000000000 AA    0.000000000000   0.000000000000  -2.078698737022 Bohr

nuclear repulsion = 4.08909662983636
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1762.35

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpgz0d27_a
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpgz0d27_a
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.867861147311336  LUMO (E1y) = -0.478632358287946
Initial guess E= -15.6868549990052  |g|= 0.0831913
macro= 0  E= -15.6892332215434  delta_E= -0.00237822  |g|= 0.0831913  1 KF 4 JK
macro= 1  E= -15.6892332216918  delta_E= -1.48457e-10  |g|= 1.70654e-05  1 KF 3 JK
Canonicalize SCF orbitals
macro X = 2  E=-15.6892332216918  |g|= 1.70654e-05  total 3 KF 10 JK
converged SCF energy = -15.6892332216918

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpgz0d27_a
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.7165099100631  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (4 JK  2 micro), CASSCF E = -15.7165873884069  dE = -7.7478344e-05  S^2 = 0.0000000
               |grad[o]|=0.00369  |grad[c]|= 0.00042261943489629405  |ddm|=0.00036
macro iter 2 (3 JK  1 micro), CASSCF E = -15.7165924482166  dE = -5.0598098e-06  S^2 = 0.0000000
               |grad[o]|=0.000903  |grad[c]|= 0.0002408038830207811  |ddm|=6.78e-05
macro iter 3 (1 JK  1 micro), CASSCF E = -15.7165924482854  dE = -6.8807182e-11  S^2 = 0.0000000
               |grad[o]|=7.3e-06  |grad[c]|= 1.053376309169842e-05  |ddm|=4.89e-06
1-step CASSCF converged in 3 macro (8 JK 4 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.97609104 1.98556582 0.00703664 0.01692898 0.00718876 0.00718876]
CASSCF energy = -15.7165924482854
CASCI E = -15.7165924482854  E(CI) = -4.29117805776105  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.716509910085525
Ground state energy (pad)  -15.716509910085525
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:59:34 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.300000000000 AA    0.000000000000   0.000000000000   2.456643961935 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.300000000000 AA    0.000000000000   0.000000000000  -2.456643961935 Bohr

nuclear repulsion = 3.46000484063077
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1837.09

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpy121d_b9
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpy121d_b9
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.76438777253455  LUMO (E1y) = -0.401418183031037
Initial guess E= -15.7242818820011  |g|= 0.0604828
macro= 0  E= -15.7258077879644  delta_E= -0.00152591  |g|= 0.0604828  1 KF 4 JK
macro= 1  E= -15.7258077933436  delta_E= -5.37923e-09  |g|= 0.000117803  1 KF 3 JK
macro= 2  E= -15.7258077933436  delta_E= -3.55271e-15  |g|= 8.12394e-06  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.7258077933436  |g|= 8.12394e-06  total 4 KF 13 JK
converged SCF energy = -15.7258077933436

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpy121d_b9
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.7593587403141  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.7594079420923  dE = -4.9201778e-05  S^2 = 0.0000000
               |grad[o]|=0.00317  |grad[c]|= 0.0007180585759569547  |ddm|=0.000368
macro iter 2 (1 JK  1 micro), CASSCF E = -15.7594079428875  dE = -7.9524654e-10  S^2 = 0.0000000
               |grad[o]|=2.63e-05  |grad[c]|= 3.248968171278245e-05  |ddm|=1.14e-05
1-step CASSCF converged in 2 macro (4 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.97069143 1.97664118 0.01271962 0.02657319 0.00668729 0.00668729]
CASSCF energy = -15.7594079428875
CASCI E = -15.7594079428875  E(CI) = -3.99899521493629  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.759358740522778
Ground state energy (pad)  -15.759358740522778
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 08:01:00 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.500000000000 AA    0.000000000000   0.000000000000   2.834589186848 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.500000000000 AA    0.000000000000   0.000000000000  -2.834589186848 Bohr

nuclear repulsion = 2.99867086188
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1921.14

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmplvr3voeg
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmplvr3voeg
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.659377120008162  LUMO (E1y) = -0.323704247937121
Initial guess E= -15.6926711424918  |g|= 0.0658654
macro= 0  E= -15.6951396752461  delta_E= -0.00246853  |g|= 0.0658654  1 KF 4 JK
macro= 1  E= -15.6951397274123  delta_E= -5.21661e-08  |g|= 0.00032029  1 KF 4 JK
macro= 2  E= -15.6951397274123  delta_E= 7.10543e-15  |g|= 3.54503e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.6951397274123  |g|= 3.54503e-09  total 4 KF 14 JK
converged SCF energy = -15.6951397274123

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmplvr3voeg
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.7388893806085  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.7389228901295  dE = -3.3509521e-05  S^2 = 0.0000000
               |grad[o]|=0.00303  |grad[c]|= 0.0005043273260108029  |ddm|=0.000328
macro iter 2 (1 JK  1 micro), CASSCF E = -15.7389228903922  dE = -2.6266811e-10  S^2 = 0.0000000
               |grad[o]|=2.38e-05  |grad[c]|= 1.875856148639547e-05  |ddm|=7.95e-06
1-step CASSCF converged in 2 macro (4 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.95930112 1.95938937 0.02256882 0.04487287 0.00693391 0.00693391]
CASSCF energy = -15.7389228903922
CASCI E = -15.7389228903922  E(CI) = -3.73337306362397  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.738889380648272
Ground state energy (pad)  -15.73888938064827
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_beh2_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/beh2/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['Be',(0.0000,0.0000,0.0000)],['H', (0.0000,0.0000, dist)],['H', (0.0000,0.0000,-dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))

        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/beh2_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/beh2_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 08:02:13 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 Be     0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   1.700000000000 AA    0.000000000000   0.000000000000   3.212534411761 Bohr
[INPUT]  3 H      0.000000000000   0.000000000000  -1.700000000000 AA    0.000000000000   0.000000000000  -3.212534411761 Bohr

nuclear repulsion = 2.6458860546
point group symmetry = Dooh, use subgroup Coov
num. orbitals of irrep A1 = 5
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      1994.47

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpb_zuv0rc
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpb_zuv0rc
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.558155882300186  LUMO (E1y) = -0.248159027530499
Initial guess E= -15.627964778305  |g|= 0.082458
macro= 0  E= -15.632792741742  delta_E= -0.00482796  |g|= 0.082458  1 KF 4 JK
macro= 1  E= -15.632793320802  delta_E= -5.7906e-07  |g|= 0.000965357  1 KF 4 JK
macro= 2  E= -15.632793320802  delta_E= 0  |g|= 5.95868e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 3  E=-15.632793320802  |g|= 5.95868e-08  total 4 KF 14 JK
converged SCF energy = -15.632793320802

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpb_zuv0rc
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -15.6912995455991  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -15.6913270657499  dE = -2.7520151e-05  S^2 = 0.0000000
               |grad[o]|=0.0032  |grad[c]|= 0.0003808191775753635  |ddm|=0.000327
macro iter 2 (1 JK  1 micro), CASSCF E = -15.6913270659126  dE = -1.6268586e-10  S^2 = 0.0000000
               |grad[o]|=2.22e-05  |grad[c]|= 1.4443997517454036e-05  |ddm|=1.29e-05
1-step CASSCF converged in 2 macro (4 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.93991027 1.92784051 0.03841455 0.0776214  0.00810664 0.00810664]
CASSCF energy = -15.6913270659126
CASCI E = -15.6913270659126  E(CI) = -3.49866861949243  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 69
after projection on singlet, matrix size ..... 41
Ground state energy (orig)  -15.691299545621822
Ground state energy (pad)  -15.691299545621822
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
Traceback (most recent call last):
  File "gather_beh2_results_ry_linear.py", line 73, in <module>
    p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
  File "/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/numpy/lib/npyio.py", line 1065, in loadtxt
    fh = np.lib._datasource.open(fname, 'rt', encoding=encoding)
  File "/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/numpy/lib/_datasource.py", line 194, in open
    return ds.open(path, mode, encoding=encoding, newline=newline)
  File "/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/numpy/lib/_datasource.py", line 531, in open
    raise IOError("%s not found." % path)
OSError: /Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/beh2/cascade_depth_7/R_1.7/output_parameters.txt not found.
    J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/h2o/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/h2o_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/h2o_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 08:02:19 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry C2v subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.380929316529 AA    0.000000000000   0.000000000000   0.719852081057 Bohr
[INPUT]  2 H      0.000000000000   2.444970706641  -1.524882385520 AA    0.000000000000   4.620325018136  -2.881610080806 Bohr
[INPUT]  3 H      0.000000000000  -2.444970706641  -1.524882385520 AA    0.000000000000  -4.620325018136  -2.881610080806 Bohr

nuclear repulsion = 2.83945471274932
point group symmetry = C2v
num. orbitals of irrep A1 = 4
num. orbitals of irrep B1 = 2
num. orbitals of irrep B2 = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      2042.37

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 B1 B2




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp781hv0en
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp781hv0en
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (B1) = -0.140680046459655  LUMO (A1) = -0.0320653222814937
Initial guess E= -74.9836198613485  |g|= 5.55678e-09
macro= 0  E= -74.9836198613485  delta_E= -2.84217e-14  |g|= 5.55678e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-74.9836198613485  |g|= 5.55678e-09  total 2 KF 4 JK
converged SCF energy = -74.9836198613485

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (4e+4e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp781hv0en
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -75.4591302202596  S^2 = 0.0005241
Set conv_tol_grad to 0.000316228
macro iter 1 (4 JK  2 micro), CASSCF E = -75.45913031593  dE = -9.5670387e-08  S^2 = 0.0004879
               |grad[o]|=0.000578  |grad[c]|= 0.0007149519595505174  |ddm|=7.05e-06
macro iter 2 (2 JK  1 micro), CASSCF E = -75.4591303196555  dE = -3.7255319e-09  S^2 = 0.0004873
               |grad[o]|=9.39e-05  |grad[c]|= 4.182867981202844e-05  |ddm|=1.23e-05
1-step CASSCF converged in 2 macro (6 JK 3 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.00397727 1.99998037 1.99999664 1.00204688 0.99796979 0.99602905]
CASSCF energy = -75.4591303196555
CASCI E = -75.4591303196555  E(CI) = -18.5524613307083  S^2 = 0.0004873
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 65
after projection on singlet, matrix size ..... 37
Ground state energy (orig)  -75.4591302651147
Ground state energy (pad)  -75.4591302651147
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_h2o_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

def geometry(d):
    z0 = 0.1177
    z1 = 0.47116
    y0 = 0.75545
    r0 = np.sqrt(y0**2+(z0+z1)**2)
    r  = d/r0
    return "O 0.0000 0.0000 {0}; H 0.0000 {1} -{2}; H 0.0000 -{1} -{2}".format(z0*r,y0*r,z1*r)

dist_list = [0.7,0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3]
depth_list = [6,7] #[3,4,5]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/h2o/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = geometry(dist),
                  basis = 'sto-6g',symmetry = 'c2v',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['B2','B1','A1','A1'],sort_virtual=['A1','B1'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/h2o/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/h2o_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/h2o_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 08:03:41 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 3
[INPUT] num. electrons = 10
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry C2v subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 O      0.000000000000   0.000000000000   0.405505401466 AA    0.000000000000   0.000000000000   0.766294150803 Bohr
[INPUT]  2 H      0.000000000000   2.602710752231  -1.623261894263 AA    0.000000000000   4.918410503177  -3.067520408600 Bohr
[INPUT]  3 H      0.000000000000  -2.602710752231  -1.623261894263 AA    0.000000000000  -4.918410503177  -3.067520408600 Bohr

nuclear repulsion = 2.66736654834028
point group symmetry = C2v
num. orbitals of irrep A1 = 4
num. orbitals of irrep B1 = 2
num. orbitals of irrep B2 = 1
number of shells = 5
number of NR pGTOs = 42
number of NR cGTOs = 7
basis = sto-6g
ecp = {}
CPU time:      2124.14

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    10 free electrons in irreps A1 B1 B2




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp2yjfm2di
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp2yjfm2di
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (B1) = -0.136643406912728  LUMO (A1) = -0.0348912617041642
Initial guess E= -74.9799842794862  |g|= 2.7529e-08
macro= 0  E= -74.9799842794862  delta_E= 5.68434e-14  |g|= 2.7529e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-74.9799842794862  |g|= 2.7529e-08  total 2 KF 4 JK
converged SCF energy = -74.9799842794862

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (4e+4e, 6o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp2yjfm2di
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -75.4589954639348  S^2 = 0.0013698
Set conv_tol_grad to 0.000316228
macro iter 1 (4 JK  2 micro), CASSCF E = -75.458995491788  dE = -2.7853162e-08  S^2 = 0.0013668
               |grad[o]|=0.000372  |grad[c]|= 0.00017904179080485645  |ddm|=8.97e-06
macro iter 2 (4 JK  2 micro), CASSCF E = -75.4589955054036  dE = -1.3615647e-08  S^2 = 0.0013634
               |grad[o]|=0.000216  |grad[c]|= 0.0002627129392914668  |ddm|=2.62e-06
1-step CASSCF converged in 2 macro (8 JK 4 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.00164427 1.9999922  1.9999986  1.00083428 0.99917225 0.9983584 ]
CASSCF energy = -75.4589955054036
CASCI E = -75.4589955054036  E(CI) = -18.4191381003822  S^2 = 0.0013634
original CI Hamiltonian matrix size .......... 225
after projection on GS irrep, matrix size .... 65
after projection on singlet, matrix size ..... 37
Ground state energy (orig)  -75.45899551346075
Ground state energy (pad)  -75.45899551346075
after padding, matrix size ................... 64
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.981698788416033
Ground state energy (pad)  -24.981698788416033
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:32:24 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.100000000000 AA    0.000000000000   0.000000000000   3.968424861587 Bohr

nuclear repulsion = 1.25994574028571
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       240.18

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmptjasy6mb
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmptjasy6mb
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.201201148753077  LUMO (E1y) = 0.227829533079876
Initial guess E= -24.8391472437197  |g|= 6.27554e-09
macro= 0  E= -24.8391472437197  delta_E= -1.06581e-14  |g|= 6.27554e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.8391472437197  |g|= 6.27554e-09  total 2 KF 4 JK
converged SCF energy = -24.8391472437197

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmptjasy6mb
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9567154713187  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9569567991116  dE = -0.00024132779  S^2 = 0.0000000
               |grad[o]|=0.0153  |grad[c]|= 0.0007401280196303364  |ddm|=0.000988
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9569568052381  dE = -6.1265162e-09  S^2 = 0.0000000
               |grad[o]|=7.91e-05  |grad[c]|= 9.994250100319596e-06  |ddm|=1.92e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87268702 1.73283764 0.26750578 0.06348478 0.06348478]
CASSCF energy = -24.9569568052381
CASCI E = -24.9569568052381  E(CI) = -3.74924256025457  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.956715471435697
Ground state energy (pad)  -24.956715471435697
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:32:36 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.300000000000 AA    0.000000000000   0.000000000000   4.346370086500 Bohr

nuclear repulsion = 1.15038524113044
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       251.07

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpk1tj53gi
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpk1tj53gi
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.175893072228651  LUMO (E1y) = 0.218433986729035
Initial guess E= -24.7980055627422  |g|= 9.40574e-11
macro= 0  E= -24.7980055627422  delta_E= 3.55271e-15  |g|= 9.40575e-11  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.7980055627422  |g|= 9.40575e-11  total 2 KF 4 JK
converged SCF energy = -24.7980055627422

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpk1tj53gi
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9375698029244  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.937809048152  dE = -0.00023924523  S^2 = 0.0000000
               |grad[o]|=0.015  |grad[c]|= 0.0007204887924120834  |ddm|=0.000919
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9378090537973  dE = -5.645262e-09  S^2 = 0.0000000
               |grad[o]|=7.33e-05  |grad[c]|= 1.0361462308937748e-05  |ddm|=1.84e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87119743 1.61735272 0.38659749 0.06242618 0.06242618]
CASSCF energy = -24.9378090537973
CASCI E = -24.9378090537973  E(CI) = -3.66435540245309  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.937569803092423
Ground state energy (pad)  -24.937569803092423
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:32:46 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.500000000000 AA    0.000000000000   0.000000000000   4.724315311413 Bohr

nuclear repulsion = 1.05835442184
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       261.43

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp4o9v6c4s
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp4o9v6c4s
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.151618191894316  LUMO (A1) = 0.191525335747452
Initial guess E= -24.7614588030389  |g|= 2.61853e-10
macro= 0  E= -24.7614588030389  delta_E= 3.55271e-15  |g|= 2.61853e-10  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.7614588030389  |g|= 2.61853e-10  total 2 KF 4 JK
converged SCF energy = -24.7614588030389

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp4o9v6c4s
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9244131069944  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9246475915822  dE = -0.00023448459  S^2 = 0.0000000
               |grad[o]|=0.0148  |grad[c]|= 0.0006968368914231047  |ddm|=0.000873
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9246475967685  dE = -5.1862621e-09  S^2 = 0.0000000
               |grad[o]|=6.87e-05  |grad[c]|= 1.035279960324152e-05  |ddm|=1.63e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87196785 1.49034232 0.51403768 0.06182608 0.06182608]
CASSCF energy = -24.9246475967685
CASCI E = -24.9246475967685  E(CI) = -3.59593197860255  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.92441310717771
Ground state energy (pad)  -24.92441310717771
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:32:59 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.700000000000 AA    0.000000000000   0.000000000000   5.102260536326 Bohr

nuclear repulsion = 0.979957798
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       273.10

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmptfppx9c8
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmptfppx9c8
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.12991950710847  LUMO (A1) = 0.165771309923964
Initial guess E= -24.7300911016497  |g|= 1.3532e-08
macro= 0  E= -24.7300911016497  delta_E= 0  |g|= 1.3532e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.7300911016497  |g|= 1.3532e-08  total 2 KF 4 JK
converged SCF energy = -24.7300911016497

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmptfppx9c8
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9161965985729  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9164262811519  dE = -0.00022968258  S^2 = 0.0000000
               |grad[o]|=0.0147  |grad[c]|= 0.0006781786821663334  |ddm|=0.000844
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9164262860019  dE = -4.8500119e-09  S^2 = 0.0000000
               |grad[o]|=6.57e-05  |grad[c]|= 9.992756189397968e-06  |ddm|=1.37e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87325552 1.37070901 0.63299342 0.06152103 0.06152103]
CASSCF energy = -24.9164262860019
CASCI E = -24.9164262860019  E(CI) = -3.54062639972961  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.916196598829295
Ground state energy (pad)  -24.916196598829295
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:33:09 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   2.900000000000 AA    0.000000000000   0.000000000000   5.480205761239 Bohr

nuclear repulsion = 0.912374501586207
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       283.63

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp5_t9enid
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp5_t9enid
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.111347537460406  LUMO (A1) = 0.145734761469016
Initial guess E= -24.7039067155873  |g|= 1.82704e-12
macro= 0  E= -24.7039067155872  delta_E= 1.42109e-14  |g|= 1.82703e-12  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.7039067155872  |g|= 1.82703e-12  total 2 KF 4 JK
converged SCF energy = -24.7039067155872

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp5_t9enid
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9114453725979  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9116714535958  dE = -0.000226081  S^2 = 0.0000000
               |grad[o]|=0.0146  |grad[c]|= 0.0006668638196766243  |ddm|=0.000829
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9116714582686  dE = -4.6728523e-09  S^2 = 0.0000000
               |grad[o]|=6.43e-05  |grad[c]|= 9.442351281135823e-06  |ddm|=1.16e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87441998 1.27041395 0.73242134 0.06137237 0.06137237]
CASSCF energy = -24.9116714582686
CASCI E = -24.9116714582686  E(CI) = -3.4952878538398  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.91144537274274
Ground state energy (pad)  -24.91144537274274
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:33:21 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.100000000000 AA    0.000000000000   0.000000000000   5.858150986152 Bohr

nuclear repulsion = 0.853511630516129
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       294.85

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp7ax3h38r
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp7ax3h38r
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.0958930572270208  LUMO (A1) = 0.130063435245185
Initial guess E= -24.6825157211777  |g|= 1.46713e-08
macro= 0  E= -24.6825157211777  delta_E= 3.55271e-15  |g|= 1.46713e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.6825157211777  |g|= 1.46713e-08  total 2 KF 4 JK
converged SCF energy = -24.6825157211777

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp7ax3h38r
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.908850689839  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.909074510162  dE = -0.00022382032  S^2 = 0.0000000
               |grad[o]|=0.0145  |grad[c]|= 0.0006597040041933818  |ddm|=0.00082
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9090745147148  dE = -4.5527884e-09  S^2 = 0.0000000
               |grad[o]|=6.34e-05  |grad[c]|= 8.711075444315461e-06  |ddm|=1.1e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.8753062  1.1926729  0.80942216 0.06129937 0.06129937]
CASSCF energy = -24.9090745147148
CASCI E = -24.9090745147148  E(CI) = -3.45735269804235  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.908850689976255
Ground state energy (pad)  -24.908850689976255
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:33:32 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.300000000000 AA    0.000000000000   0.000000000000   6.236096211065 Bohr

nuclear repulsion = 0.801783652909091
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       305.11

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpac04t23w
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpac04t23w
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.083258126456334  LUMO (A1) = 0.117716922543391
Initial guess E= -24.665303534539  |g|= 8.22959e-08
macro= 0  E= -24.665303534539  delta_E= -7.10543e-15  |g|= 8.22959e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.665303534539  |g|= 8.22959e-08  total 2 KF 4 JK
converged SCF energy = -24.665303534539

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpac04t23w
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9074903869823  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9077129743337  dE = -0.00022258735  S^2 = 0.0000000
               |grad[o]|=0.0144  |grad[c]|= 0.0006562366996983737  |ddm|=0.000814
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9077129788138  dE = -4.4801141e-09  S^2 = 0.0000000
               |grad[o]|=6.3e-05  |grad[c]|= 7.714857251743237e-06  |ddm|=1.06e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87593497 1.13524572 0.86629372 0.0612628  0.0612628 ]
CASSCF energy = -24.9077129788138
CASCI E = -24.9077129788138  E(CI) = -3.42494313051487  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.90749038716302
Ground state energy (pad)  -24.90749038716302
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:33:42 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.500000000000 AA    0.000000000000   0.000000000000   6.614041435978 Bohr

nuclear repulsion = 0.755967444171429
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       315.10

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmptjoyj2ky
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmptjoyj2ky
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.0730239547039974  LUMO (A1) = 0.107894755741465
Initial guess E= -24.6515731736292  |g|= 3.36546e-09
macro= 0  E= -24.6515731736292  delta_E= -7.10543e-15  |g|= 3.36546e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.6515731736292  |g|= 3.36546e-09  total 2 KF 4 JK
converged SCF energy = -24.6515731736292

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmptjoyj2ky
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9067975963744  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9070196157581  dE = -0.00022201938  S^2 = 0.0000000
               |grad[o]|=0.0143  |grad[c]|= 0.000654765180774037  |ddm|=0.000811
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9070196202116  dE = -4.4535469e-09  S^2 = 0.0000000
               |grad[o]|=6.27e-05  |grad[c]|= 7.504271755285848e-06  |ddm|=1.01e-05
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87636959 1.0940043  0.90713735 0.06124438 0.06124438]
CASSCF energy = -24.9070196202116
CASCI E = -24.9070196202116  E(CI) = -3.39675422604631  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.90679759657395
Ground state energy (pad)  -24.90679759657395
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:33:51 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.700000000000 AA    0.000000000000   0.000000000000   6.991986660891 Bohr

nuclear repulsion = 0.715104339081081
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       323.36

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpx7ckdfix
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpx7ckdfix
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.0647529862860787  LUMO (A1) = 0.099985398661889
Initial guess E= -24.6406467638737  |g|= 6.08838e-09
macro= 0  E= -24.6406467638737  delta_E= 0  |g|= 6.08838e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.6406467638737  |g|= 6.08838e-09  total 2 KF 4 JK
converged SCF energy = -24.6406467638737

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpx7ckdfix
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9064520613954  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9066739024965  dE = -0.0002218411  S^2 = 0.0000000
               |grad[o]|=0.0143  |grad[c]|= 0.0006542738477855133  |ddm|=0.000809
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9066739069385  dE = -4.442068e-09  S^2 = 0.0000000
               |grad[o]|=6.26e-05  |grad[c]|= 7.412758806865679e-06  |ddm|=9.93e-06
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87666943 1.06487058 0.93598969 0.06123515 0.06123515]
CASSCF energy = -24.9066739069385
CASCI E = -24.9066739069385  E(CI) = -3.37188773743837  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.906452061588126
Ground state energy (pad)  -24.906452061588126
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:34:00 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   3.900000000000 AA    0.000000000000   0.000000000000   7.369931885804 Bohr

nuclear repulsion = 0.678432321692308
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       332.40

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp92riy_ba
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp92riy_ba
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.0580445803320587  LUMO (A1) = 0.0935262883443234
Initial guess E= -24.6319241485853  |g|= 7.78681e-09
macro= 0  E= -24.6319241485853  delta_E= 0  |g|= 7.78681e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.6319241485853  |g|= 7.78681e-09  total 2 KF 4 JK
converged SCF energy = -24.6319241485853

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp92riy_ba
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9062823867263  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9065042617653  dE = -0.00022187504  S^2 = 0.0000000
               |grad[o]|=0.0142  |grad[c]|= 0.0006542527771618102  |ddm|=0.000808
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9065042662016  dE = -4.4363233e-09  S^2 = 0.0000000
               |grad[o]|=6.26e-05  |grad[c]|= 7.308796357694734e-06  |ddm|=9.89e-06
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87687857 1.04449669 0.95616356 0.06123059 0.06123059]
CASSCF energy = -24.9065042662016
CASCI E = -24.9065042662016  E(CI) = -3.34971346094292  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.906282386898823
Ground state energy (pad)  -24.90628238689882
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:34:08 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   4.100000000000 AA    0.000000000000   0.000000000000   7.747877110717 Bohr

nuclear repulsion = 0.645338062097561
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       340.14

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpyugbof6c
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpyugbof6c
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.0525592039055413  LUMO (A1) = 0.0881708257201495
Initial guess E= -24.624906334298  |g|= 8.2237e-09
macro= 0  E= -24.624906334298  delta_E= 7.10543e-15  |g|= 8.2237e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.624906334298  |g|= 8.2237e-09  total 2 KF 4 JK
converged SCF energy = -24.624906334298

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpyugbof6c
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.906200082722  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9064220987478  dE = -0.00022201603  S^2 = 0.0000000
               |grad[o]|=0.0142  |grad[c]|= 0.0006544437498853608  |ddm|=0.000808
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9064221031813  dE = -4.4334918e-09  S^2 = 0.0000000
               |grad[o]|=6.26e-05  |grad[c]|= 7.207434165371227e-06  |ddm|=9.9e-06
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87702711 1.03034661 0.97016953 0.06122837 0.06122837]
CASSCF energy = -24.9064221031813
CASCI E = -24.9064221031813  E(CI) = -3.32977405560782  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.90620008287147
Ground state energy (pad)  -24.90620008287147
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:34:17 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   4.300000000000 AA    0.000000000000   0.000000000000   8.125822335630 Bohr

nuclear repulsion = 0.61532233827907
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       349.28

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpxz9125sy
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpxz9125sy
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.0480227454382472  LUMO (A1) = 0.0836610082379565
Initial guess E= -24.6191956921416  |g|= 8.08272e-09
macro= 0  E= -24.6191956921416  delta_E= 3.55271e-15  |g|= 8.08272e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.6191956921416  |g|= 8.08272e-09  total 2 KF 4 JK
converged SCF energy = -24.6191956921416

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpxz9125sy
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.906160565944  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9063827709255  dE = -0.00022220498  S^2 = 0.0000000
               |grad[o]|=0.0142  |grad[c]|= 0.0006547179985856409  |ddm|=0.000807
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9063827753576  dE = -4.4321062e-09  S^2 = 0.0000000
               |grad[o]|=6.26e-05  |grad[c]|= 7.119404834624845e-06  |ddm|=9.92e-06
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87713482 1.02057357 0.97983696 0.06122732 0.06122732]
CASSCF energy = -24.9063827753576
CASCI E = -24.9063827753576  E(CI) = -3.31172496720041  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.90616056607282
Ground state energy (pad)  -24.90616056607282
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:34:26 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   4.500000000000 AA    0.000000000000   0.000000000000   8.503767560543 Bohr

nuclear repulsion = 0.5879746788
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       357.99

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp0_id6g8s
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp0_id6g8s
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.0442205914435654  LUMO (A1) = 0.0798053061854493
Initial guess E= -24.6144841044006  |g|= 7.80367e-09
macro= 0  E= -24.6144841044006  delta_E= -3.55271e-15  |g|= 7.80367e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.6144841044006  |g|= 7.80367e-09  total 2 KF 4 JK
converged SCF energy = -24.6144841044006

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmp0_id6g8s
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9061417560784  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9063641661861  dE = -0.00022241011  S^2 = 0.0000000
               |grad[o]|=0.0142  |grad[c]|= 0.0006550134412082693  |ddm|=0.000807
macro iter 2 (3 JK  1 micro), CASSCF E = -24.9063641706176  dE = -4.4315094e-09  S^2 = 0.0000000
               |grad[o]|=6.25e-05  |grad[c]|= 7.049558535710698e-06  |ddm|=9.95e-06
1-step CASSCF converged in 2 macro (6 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87721463 1.01385928 0.98647242 0.06122683 0.06122683]
CASSCF energy = -24.9063641706176
CASCI E = -24.9063641706176  E(CI) = -3.29529761370353  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.90614175619041
Ground state energy (pad)  -24.90614175619041
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:34:36 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   4.700000000000 AA    0.000000000000   0.000000000000   8.881712785456 Bohr

nuclear repulsion = 0.562954479702128
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       368.23

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpye4l6giq
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpye4l6giq
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.0409878173241899  LUMO (A1) = 0.0764614066579124
Initial guess E= -24.6105369901156  |g|= 7.33579e-09
macro= 0  E= -24.6105369901156  delta_E= 0  |g|= 7.33579e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.6105369901156  |g|= 7.33579e-09  total 2 KF 4 JK
converged SCF energy = -24.6105369901156

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpye4l6giq
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9061328585886  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9063554736712  dE = -0.00022261508  S^2 = 0.0000000
               |grad[o]|=0.0142  |grad[c]|= 0.0006553018583647508  |ddm|=0.000807
macro iter 2 (2 JK  1 micro), CASSCF E = -24.9063554781025  dE = -4.4312962e-09  S^2 = 0.0000000
               |grad[o]|=6.25e-05  |grad[c]|= 6.998312548074837e-06  |ddm|=9.98e-06
1-step CASSCF converged in 2 macro (5 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87727498 1.00927225 0.99099954 0.06122661 0.06122661]
CASSCF energy = -24.9063554781025
CASCI E = -24.9063554781025  E(CI) = -3.28027673093781  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.90613285868733
Ground state energy (pad)  -24.90613285868733
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:34:47 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   4.900000000000 AA    0.000000000000   0.000000000000   9.259658010369 Bohr

nuclear repulsion = 0.539976745836735
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       377.81

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpee7m4ltu
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpee7m4ltu
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.0381990280104887  LUMO (A1) = 0.0735231709482602
Initial guess E= -24.607177636314  |g|= 6.87569e-09
macro= 0  E= -24.607177636314  delta_E= -3.55271e-15  |g|= 6.87569e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.607177636314  |g|= 6.87569e-09  total 2 KF 4 JK
converged SCF energy = -24.607177636314

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpee7m4ltu
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9061286547607  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9063514668593  dE = -0.0002228121  S^2 = 0.0000000
               |grad[o]|=0.0142  |grad[c]|= 0.0006555718521365774  |ddm|=0.000807
macro iter 2 (2 JK  1 micro), CASSCF E = -24.9063514712906  dE = -4.4313104e-09  S^2 = 0.0000000
               |grad[o]|=6.25e-05  |grad[c]|= 6.9629496962724834e-06  |ddm|=1e-05
1-step CASSCF converged in 2 macro (5 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87732151 1.00615789 0.99406757 0.06122651 0.06122651]
CASSCF energy = -24.9063514712906
CASCI E = -24.9063514712906  E(CI) = -3.266486051489  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.906128654849002
Ground state energy (pad)  -24.906128654849002
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:34:56 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   5.100000000000 AA    0.000000000000   0.000000000000   9.637603235282 Bohr

nuclear repulsion = 0.518801187176471
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       386.55

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpsowqekhf
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpsowqekhf
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.0357594007374064  LUMO (A1) = 0.0709109816907215
Initial guess E= -24.6042737050699  |g|= 1.01934e-08
macro= 0  E= -24.6042737050699  delta_E= 1.06581e-14  |g|= 1.01934e-08  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.6042737050699  |g|= 1.01934e-08  total 2 KF 4 JK
converged SCF energy = -24.6042737050699

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpsowqekhf
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9061266489843  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9063496468832  dE = -0.0002229979  S^2 = 0.0000000
               |grad[o]|=0.0142  |grad[c]|= 0.0006558201024096555  |ddm|=0.000806
macro iter 2 (2 JK  1 micro), CASSCF E = -24.9063496513146  dE = -4.4314028e-09  S^2 = 0.0000000
               |grad[o]|=6.25e-05  |grad[c]|= 6.938906634422212e-06  |ddm|=1e-05
1-step CASSCF converged in 2 macro (5 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.877358   1.00405791 0.99613115 0.06122647 0.06122647]
CASSCF energy = -24.9063496513146
CASCI E = -24.9063496513146  E(CI) = -3.25377888179079  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.90612664906423
Ground state energy (pad)  -24.90612664906423
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
#INFO: **** input file is /Users/mario/Documents/GitHub/VATech/quantum_database/first_quantization/pad/variation_after_projection/circuits/gather_bh_results_ry_linear.py ****
from pyscf import gto,scf
import numpy as np
import sys
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad/src/')
from subroutines import get_hamiltonian_matrix,get_spin_square_matrix,project_along_irrep,project_along_singlet,pad_matrix,trim,get_orbital_info,permute_orbitals
from quantum import matrix_to_qubit_operator,make_ry_ansatz,do_VQE
from VAP_vqe import VQE

import numpy as np
sys.path.append('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/subroutines/')
from utils         import *

from qiskit import Aer
from qiskit.chemistry.drivers                      import UnitsType,HFMethodType
from qiskit.chemistry.core                         import Hamiltonian,TransformationType,QubitMappingType
from qiskit.chemistry.components.initial_states    import HartreeFock
from qiskit.chemistry.components.variational_forms import UCCSD
from qiskit.aqua.components.optimizers             import L_BFGS_B,COBYLA,CG
from qiskit.aqua                                   import QuantumInstance,aqua_globals
from qiskit.circuit.library                        import EfficientSU2

def print_circuit(fname,circuit):
    outf = open(fname,'w')
    for gate in circuit:
        gate_name = gate[0].name
        qubits = [q.index for q in gate[1]]
        outf.write(str(gate_name)+' | '+' '.join([str(x) for x in qubits])+' | '+' '.join([str(x._symbol_expr) for x in gate[0].params])+'\n')
    outf.close()

def print_results(fname,res_vqe,res_ee,dN=0):
    outf = open(fname,'w')
    outf.write('%.12f %.12f \n' % (res_vqe[0],np.real(res_ee[0])))
    outf.write('%.12f %.12f \n' % (res_vqe[1],np.real(res_ee[1])))
    outf.write('%.12f %.12f \n' % (res_vqe[2],np.real(res_ee[2])))
    outf.close()

dist_list = [0.9,1.1,1.3,1.5,1.7,1.9,2.1,2.3,2.5,2.7,2.9,3.1,3.3,3.5,3.7,3.9,4.1,4.3,4.5,4.7,4.9,5.1,5.3]
depth_list = [6,7]

for depth in depth_list:
    for dist in dist_list:
        rho  = np.load('/Users/mario/Documents/GitHub/QITE/qite_es/scf_calculations/SCF_FCI/bh/res_fourth_pass.npy',allow_pickle=True).item()
        rho  = rho[str(dist)]['rho_scf']
        mol = gto.Mole()
        mol.build(atom  = [['B',(0.0000,0.0000,0.0000)],['H',(0.0000,0.0000, dist)]],
                  basis = 'sto-6g',symmetry = 'coov',spin = 0,charge = 0,verbose = 4)
        mf       = scf.RHF(mol)
        mf       = scf.newton(mf)
        mf.kernel(rho)

        orb_info = get_orbital_info(mf)
        perm = permute_orbitals(orb_info,nf=1,sort_occupied=['A1','A1','A1'],
                                              sort_virtual=['A1','E1x','E1y'])
        H_fci,mycas = get_hamiltonian_matrix(mol,mf,nf=1,permutation=perm)
        S_fci       = get_spin_square_matrix(mol,mf,nf=1,nci=H_fci.shape[0])
        print("original CI Hamiltonian matrix size ..........",H_fci.shape[0])
        
        H_fci,S_fci = project_along_irrep(mol,mf,mycas,nf=1,H_fci=H_fci,S_fci=S_fci)
        print("after projection on GS irrep, matrix size ....",H_fci.shape[0])
        
        H_fci,S_fci = project_along_singlet(H_fci,S_fci)
        print("after projection on singlet, matrix size .....",H_fci.shape[0])
        
        H_fci,S_fci,Proj,nqubit = pad_matrix(H_fci,S_fci)
        print("after padding, matrix size ...................",H_fci.shape[0])
        
        H_op = matrix_to_qubit_operator(H_fci)
        P = matrix_to_qubit_operator(Proj)
        J = matrix_to_qubit_operator(np.dot(Proj,np.dot(H_fci,Proj)))
        A_op = [P,J]

        var_form = make_ry_ansatz(nqubit,layers=depth)
        p0 = np.loadtxt('/Users/mario/Documents/GitHub/QITE/qite_es/first_quantization_pad_VAP_Ry/bh/cascade_depth_%d/R_%s/output_parameters.txt'%(depth,str(dist)))
        optimizer = COBYLA(maxiter=0)
        algo      = VQE(H_op,var_form,optimizer,aux_operators=A_op,include_custom=True,initial_point=p0)
        backend          = Aer.get_backend('statevector_simulator')
        quantum_instance = QuantumInstance(backend=backend)
        algo_result      = algo.run(quantum_instance)
       
        p1 = algo._ret['opt_params']
        outfile = open('ry_linear_results.txt','w')
        res_vqe,res_ee = get_results_first_quantization(H_op,A_op,algo_result,outfile)
        print_results('ry_linear_%d/bh_%s_results.txt' % (depth,str(dist)),res_vqe,res_ee)
        circuit = var_form.bind_parameters(p1)
        print_circuit('ry_linear_%d/bh_%s_circuit.txt' % (depth,str(dist)),circuit)
 
#INFO: ******************** input file end ********************


System: uname_result(system='Darwin', node='Marios-MacBook-Pro.local', release='20.6.0', version='Darwin Kernel Version 20.6.0: Mon Aug 30 06:12:21 PDT 2021; root:xnu-7195.141.6~3/RELEASE_X86_64', machine='x86_64', processor='i386')  Threads 1
Python 3.7.9 (default, Aug 31 2020, 07:22:35) 
[Clang 10.0.0 ]
numpy 1.20.1  scipy 1.6.0
Date: Fri May 20 07:35:06 2022
PySCF version 1.7.6
PySCF path  /Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/pyscf

[CONFIG] conf_file None
[INPUT] verbose = 4
[INPUT] num. atoms = 2
[INPUT] num. electrons = 6
[INPUT] charge = 0
[INPUT] spin (= nelec alpha-beta = 2S) = 0
[INPUT] symmetry Coov subgroup None
[INPUT] Mole.unit = angstrom
[INPUT]  1 B      0.000000000000   0.000000000000   0.000000000000 AA    0.000000000000   0.000000000000   0.000000000000 Bohr
[INPUT]  2 H      0.000000000000   0.000000000000   5.300000000000 AA    0.000000000000   0.000000000000  10.015548460195 Bohr

nuclear repulsion = 0.499223783886793
point group symmetry = Coov
num. orbitals of irrep A1 = 4
num. orbitals of irrep E1x = 1
num. orbitals of irrep E1y = 1
number of shells = 4
number of NR pGTOs = 36
number of NR cGTOs = 6
basis = sto-6g
ecp = {}
CPU time:       396.60

WARN: Newton solver expects mo_coeff with mo_occ as initial guess but mo_occ is not found in the arguments.
      The given argument is treated as density matrix.

Freeze 0 electrons in irreps []
    6 free electrons in irreps A1 E1x E1y




******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> ********
method = SymAdaptedRHF-RHF
initial guess = minao
damping factor = 0
level_shift factor = 0
DIIS = <class 'pyscf.scf.diis.CDIIS'>
diis_start_cycle = 1
diis_space = 8
SCF conv_tol = 1e-09
SCF conv_tol_grad = None
SCF max_cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpdro8ld2r
max_memory 4000 MB (current use 0 MB)
******** <class 'pyscf.scf.hf_symm.SymAdaptedRHF'> Newton solver flags ********
SCF tol = 1e-09
conv_tol_grad = None
max. SCF cycles = 50
direct_scf = True
direct_scf_tol = 1e-13
chkfile to save SCF result = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpdro8ld2r
max_cycle_inner = 12
max_stepsize = 0.05
ah_start_tol = 1e+09
ah_level_shift = 0
ah_conv_tol = 1e-12
ah_lindep = 1e-14
ah_start_cycle = 1
ah_max_cycle = 40
ah_grad_trust_region = 2.5
kf_interval = 4
kf_trust_region = 5
canonicalization = True
max_memory 4000 MB (current use 0 MB)
Set conv_tol_grad to 3.16228e-05
HOMO (A1) = -0.0335973678394972  LUMO (A1) = 0.0685646753935321
Initial guess E= -24.6017263530794  |g|= 1.82946e-09
macro= 0  E= -24.6017263530794  delta_E= -7.10543e-15  |g|= 1.82946e-09  1 KF 2 JK
Canonicalize SCF orbitals
macro X = 1  E=-24.6017263530794  |g|= 1.82946e-09  total 2 KF 4 JK
converged SCF energy = -24.6017263530794

******** <class 'pyscf.mcscf.mc1step_symm.SymAdaptedCASSCF'> ********
CAS (2e+2e, 5o), ncore = 1, nvir = 0
max_cycle_macro = 50
max_cycle_micro = 4
conv_tol = 1e-07
conv_tol_grad = None
orbital rotation max_stepsize = 0.02
augmented hessian ah_max_cycle = 30
augmented hessian ah_conv_tol = 1e-12
augmented hessian ah_linear dependence = 1e-14
augmented hessian ah_level shift = 0
augmented hessian ah_start_tol = 2.5
augmented hessian ah_start_cycle = 3
augmented hessian ah_grad_trust_region = 3
kf_trust_region = 3
kf_interval = 4
ci_response_space = 4
ci_grad_trust_region = 3
with_dep4 0
natorb = False
canonicalization = True
sorting_mo_energy = False
ao2mo_level = 2
chkfile = /var/folders/7m/f464jvrs78n7m3djcnsxfxgr0000gn/T/tmpdro8ld2r
max_memory 4000 MB (current use 0 MB)
internal_rotation = False
******** <class 'pyscf.fci.direct_spin1_symm.FCISolver'> ********
max. cycles = 50
conv_tol = 1e-08
davidson only = True
linear dependence = 1e-10
level shift = 0.001
max iter space = 12
max_memory 4000 MB
nroots = 1
pspace_size = 0
spin = None
CI wfn symmetry = None
Active space CI wfn symmetry = A1
CASCI E = -24.9061256616372  S^2 = 0.0000000
Set conv_tol_grad to 0.000316228
macro iter 1 (3 JK  1 micro), CASSCF E = -24.9063488332111  dE = -0.00022317157  S^2 = 0.0000000
               |grad[o]|=0.0142  |grad[c]|= 0.0006560469388425844  |ddm|=0.000806
macro iter 2 (2 JK  1 micro), CASSCF E = -24.9063488376426  dE = -4.4315449e-09  S^2 = 0.0000000
               |grad[o]|=6.25e-05  |grad[c]|= 6.922073745523789e-06  |ddm|=1e-05
1-step CASSCF converged in 2 macro (5 JK 2 micro) steps
CASSCF canonicalization
Density matrix diagonal elements [1.87738705 1.00265255 0.99750749 0.06122646 0.06122646]
CASSCF energy = -24.9063488376426
CASCI E = -24.9063488376426  E(CI) = -3.24203161970647  S^2 = 0.0000000
original CI Hamiltonian matrix size .......... 100
after projection on GS irrep, matrix size .... 28
after projection on singlet, matrix size ..... 19
Ground state energy (orig)  -24.90612566171042
Ground state energy (pad)  -24.90612566171042
after padding, matrix size ................... 32
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
/Users/mario/anaconda3/envs/qiskit2021/lib/python3.7/site-packages/qiskit/aqua/operators/legacy/op_converter.py:36: DeprecationWarning: `from_label` is deprecated and will be removed no earlier than 3 months after the release date. Use Pauli(label) instead.
  pauli = Pauli.from_label(''.join(basis))
RUNNING VAP_VQE
